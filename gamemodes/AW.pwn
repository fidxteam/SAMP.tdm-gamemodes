#include <a_samp>

#include <streamer>

main()
{
	print("\n----------------------------------");
	print(" FARxDEV for Indonesian TDM ");
	print(" Welcome to 2022, Backup 2019 ");
	print("----------------------------------\n");
}

#define GetDynamicObjectModel(%0) Streamer_GetIntData(STREAMER_TYPE_OBJECT, %0, E_STREAMER_MODEL_ID)

#define SELECT_FACTION 1


//Timer for players to load the world and not fall through the map
forward SetPlayerPosWithWorldLoadDelay(playerid, Float:x, Float:y, Float:z, Float:PlayerFacingAngle,bool:EnEx);
forward LoadWorldForPlayer(playerid);
//Timers
forward ResetActorsPositions();
//Per player timers for abilities
forward DashCooldown(playerid);
forward BiteCooldown(playerid);
//Alien Ship
forward AlienShipAction(); 
forward AlienShipAttackEnd(); new AlienShipAttackEndTimer;


//Checking if player is in San Andreas
forward IsPlayerInSanAndreas();
new PlayerIsInSanAndreas[MAX_PLAYERS];
//Abilities vars
new bool:AllowDash[MAX_PLAYERS] = false;
new bool:AllowBite[MAX_PLAYERS] = false;

//Bot messages

forward AutomaticMessages();
new AutoMsg = 1;//Server messages
//Weather system
// 23 21
new ServerGlobalWeather = 24;
new ServerGlobalTime = 4;

new WeatherTimer = -1;

new WeatherOrder = 0;

forward ChangeGlobalWeatherAndTime();
//Player Textdraws abilities

new PlayerText:DashTD[MAX_PLAYERS];
new PlayerText:BiteTD[MAX_PLAYERS];


//Player Textdraws Level and EXP

new PlayerText:CivilianLevelTD[MAX_PLAYERS];
new PlayerText:CivilianExpTD[MAX_PLAYERS];

new PlayerText:MilitaryLevelTD[MAX_PLAYERS];
new PlayerText:MilitaryExpTD[MAX_PLAYERS];

new PlayerText:MonsterLevelTD[MAX_PLAYERS];
new PlayerText:MonsterExpTD[MAX_PLAYERS];

//Random Spawns for civilians

new Float:RandomCivilianSpawn[][4] =
{
{-5680.8447,2866.0808,5.0000,178.8217},
{-5487.2842,2878.7161,4.9900,267.4442},
{-5341.7759,2949.2427,4.9900,270.6388},
{-5395.1162,3098.3640,5.0000,89.8405},
{-5420.1641,3039.3918,5.0000,267.5626},
{-5511.6670,3145.1729,5.0000,267.5851},
{-5496.3726,2993.0559,4.9900,273.5073},
{-5630.9307,2922.5923,5.0000,358.1284},
{-5536.9453,3062.0618,5.0000,359.1578},
{-5545.4277,3144.9094,5.0000,1.0636},
{-5607.3408,3223.9810,8.9378,0.8980},
{-5712.8687,3259.3748,5.2284,179.8874},
{-5743.8188,3119.1448,5.0000,267.4274},
{-5676.8027,3112.7866,5.0000,88.0112},
{-5672.3535,3031.2563,5.0000,89.8268},
{-5702.2739,2939.3306,5.0000,267.8923},
{-5655.7441,2869.1462,5.0000,178.4686},
{-5753.1655,2869.7292,5.0000,87.2584},
{-5735.0537,2996.1631,5.0000,2.4082},
{-5723.5303,3078.4131,5.0000,0.3002},
{-5778.8779,3141.2646,5.0000,270.6774},
{-5874.8257,3154.3179,4.9800,357.4551},
{-5912.7695,3069.6423,5.3046,88.5775},
{-5814.3667,3002.0627,5.0000,271.0339},
{-5833.6699,2949.9309,5.0000,87.0245},
{-5860.0034,2893.5112,5.5238,268.5330},
{-5908.7026,2903.0498,5.2174,91.8411}
};


//Random Spawns for some Monsters

new Float:RandomMonstersSpawn[][4] =
{
{-5422.7734,2865.4600,4.9900,180.0000},
{-5880.6084,2227.0518,4.9900,7.7187},
{-6266.9160,2516.8647,4.9900,81.6553},
{-6853.5557,2836.8945,14.2612,53.3430},
{-7237.7500,3197.2798,4.9900,207.5959},
{-7166.9302,2776.5132,4.9900,194.5353},
{-7516.6636,2571.3328,4.9900,210.0523},
{-7790.3247,3159.3604,4.9900,329.9567},
{-7960.9331,2472.5198,4.9900,196.8236},
{-7182.7402,1915.8447,4.9900,234.5186},
{-6524.4097,1781.2665,6.1509,248.9936},
{-6161.5439,1548.7592,4.9900,236.7914},
{-5871.9419,1178.2841,10.4011,135.3079},
{-5694.3247,723.3525,4.9900,115.0398},
{-6166.7422,650.0905,4.9900,110.4045},
{-6592.7788,906.9517,19.9678,86.7350},
{-6803.5405,1159.8419,14.9854,67.4186},
{-6952.2490,856.1068,4.9900,142.0702},
{-7011.7329,469.2750,4.9900,244.3860},
{-6738.3374,230.7027,4.9900,306.8329},
{-6423.6523,176.8666,4.9900,267.5999},
{-6249.5737,-216.2032,11.5630,189.7764},
{-6547.6055,-139.7388,4.9900,142.7716},
{-6931.2222,159.9018,4.9900,94.6695},
{-7415.9497,65.6550,10.0848,119.5051},
{-7711.5073,364.1349,4.9900,13.3872},
{-8072.7847,519.4415,4.9500,279.3251},
{-7715.2256,1002.3068,4.9900,276.6154},
{-7436.8677,1396.8590,12.1018,16.6245},
{-6977.5410,1613.9274,5.6154,283.9850}
};

//Class selection checkpoints


//Military
new TownMilitiaSelectCheckpoint;
new PoliceSelectCheckpoint;
new SwatSelectCheckpoint;
new MilitarySelectCheckpoint;
new DeltaForceSelectCheckpoint;

//Monsters
new WolfSelectCheckpoint;
new BearSelectCheckpoint;
new ZombieSelectCheckpoint;
new HumanMutantSelectCheckpoint;
new HumanLizardSelectCheckpoint;
new SkeletonSelectCheckpoint;
new BigfootSelectCheckpoint;
new AngelOfDeathSelectCheckpoint;

//Class Selection system

new PlayerWentThroughClassSelection[MAX_PLAYERS] = 0;


//PlayerSystemVariables
new PlayerIsCivilian[MAX_PLAYERS];

new PlayerMilitaryType[MAX_PLAYERS];
new PlayerMonsterType[MAX_PLAYERS];

new PlayerCivilianLevel[MAX_PLAYERS];
new PlayerMilitaryLevel[MAX_PLAYERS];
new PlayerMonsterLevel[MAX_PLAYERS];

new PlayerCivilianExp[MAX_PLAYERS];
new PlayerMilitaryExp[MAX_PLAYERS];
new PlayerMonsterExp[MAX_PLAYERS];

//OBJECT VARIABLES

//new GroundAddDetails[MAX_OBJECTS] = 1;


//OBJECTS
new PortTownSign1 = 0;
new PortTownSign2 = 0;


new MonsterCage = 0;
new MilitaryCage = 0;

new LandShip1;
new LandShip2;
new LandShip3;

new AlienShipObject1;
new AlienShipObject2;
new AlienShipObject3;
new AlienShipObject4;

new AlienShipLazerBeam;

new AlienShipSequence = 0;
new AlienShipFinishedMoving = 0;

new AlienShipDamageLevel = 0;

new AlienShipHealth = 10000;

//GANGZONES

new PortTownZone;

public OnGameModeInit()
{

SetGameModeText("AW 1.0");

UsePlayerPedAnims();

EnableStuntBonusForAll(0);

Streamer_SetTickRate(50);//TICKRATE OF THE STREAMER 1?

SetTimer("IsPlayerInSanAndreas", 35000, true);
SetTimer("AutomaticMessages", 480000, true);
WeatherTimer = SetTimer("ChangeGlobalWeatherAndTime", 960000, true); //17 MINS, -25%?

//System timers
SetTimer("ResetActorsPositions", 15000, true);

//SetWeather(293);
//SetWorldTime(12);

//SetWeather(16);
//SetWorldTime(0);

//SetWeather(62);
//SetWorldTime(1);

//SetWeather(23);
//SetWorldTime(21);


//GANGZONES MAPPING
PortTownZone = GangZoneCreate(-5835.2344, 2936.5156, -5561.9634, 3165.0007);

//redneck 3 houses
CreateActor(199,-7856.2983,615.4141,4.9700,356.2163); //
//redneck village
CreateActor(242,-7700.6733,1942.1412,4.9900,269.1999); //
CreateActor(241,-7684.0562,1958.6733,5.4236,177.9724); //
CreateActor(31,-7687.8989,1932.2532,4.9900,358.4073); //
CreateActor(32,-7705.9707,1935.2356,4.9900,275.3732); //
CreateActor(34,-7728.4453,1945.0231,4.9900,286.0266); //
CreateActor(133,-7726.3496,1945.7107,4.9900,107.4250); //
CreateActor(157,-7694.7437,1975.8478,4.9900,264.3830); //
CreateActor(161,-7692.1797,1973.6703,4.9900,357.1305); //
CreateActor(198,-7691.2480,1976.9403,4.9900,129.6717); //

//Military Base
CreateActor(20003,-7215.2603,1404.9144,21.0461,357.1033); //
CreateActor(20003,-7056.7534,1405.4829,21.0461,269.8594); //
CreateActor(20003,-7056.2090,1148.4553,21.0461,267.7852); //
CreateActor(20003,-7214.6694,1207.0819,21.0461,132.1072); //
CreateActor(179,-7180.3843,1398.4515,5.0500,141.1528); //
CreateActor(20003,-7183.3193,1394.7850,5.0500,341.9780); //
CreateActor(20003,-7180.6699,1394.3785,5.0500,16.4450); //
CreateActor(20003,-7191.9873,1291.1039,4.9900,359.5249); //
CreateActor(20003,-7168.6255,1265.5747,4.9900,107.6025); //
CreateActor(20003,-7170.4028,1265.1759,4.9900,287.6025); //
CreateActor(20003,-7167.5537,1222.3568,4.9900,245.7838); //

//petrol station
CreateActor(202,-7687.8936,2815.6912,4.9900,180.6038); //
CreateActor(206,-7708.0728,2897.3679,4.9900,91.2792); //
//city

CreateActor(62,-5933.9580,2995.7371,6.1900,276.5979 ); //
CreateActor(95,-5883.5122,2830.4917,6.9341,188.2760 ); //
CreateActor(258,-5645.6851,2824.1885,6.6745,270.7713 ); //
CreateActor(168,-5658.8364,3022.9219,5.0000,177.7655 ); //
CreateActor(264,-5757.1260,3028.8772,5.0000,91.5254 ); //
CreateActor(168,-5546.1973,3155.7195,5.0000,0.7232 ); //
CreateActor(230,-5606.7671,3135.7764,5.0000,0.5389 ); //
CreateActor(50,-5678.8135,3189.2893,5.0000,178.4238 ); //
CreateActor(42,-5665.0688,3315.3113,5.2284,358.6270 ); //
CreateActor(67,-5827.1680,2986.3367,10.4780,90.3627 ); //
CreateActor(71,-5680.0020,3053.8574,5.0000,105.5817 ); //
CreateActor(13,-5448.0420,3056.7058,5.0000,176.4805 ); //
CreateActor(19,-5403.3750,2919.1265,4.9900,86.0583 ); //
CreateActor(66,-5566.8223,2880.4482,4.9900,179.7182 ); //
CreateActor(283,-5439.2085,2899.7544,4.9900,214.7447 ); //
CreateActor(283,-5438.1514,2898.5447,4.9900,34.7447 ); //
CreateActor(141,-5728.7100,3114.6260,5.2117,91.8240); //
CreateActor(85,-5713.2896,3135.2864,5.0000,179.4880); //
CreateActor(153,-5680.9438,3228.6309,8.9378,359.9079); //
CreateActor(164,-5375.2495,2952.0369,5.8165,192.6410); //
CreateActor(228,-5616.2627,3023.6824,5.0000,181.6832); //
CreateActor(56,-5343.0449,3110.7795,11.1352,268.8641); //
CreateActor(101,-5547.3950,3051.6270,5.0000,356.9162); //
//Police selection


CreateActor(71,290.0000,159.0,1012.0699,90);
CreateActor(280,290.0000,165.0,1012.0699,90);
CreateActor(285,290.0000,171.0,1012.0699,90);
CreateActor(287,290.0000,177.0,1012.0699,90);
CreateActor(20003,290.0000,183.0,1012.0699,90);


//Monster selection

CreateActor(20008,369.0000,314.0,1003.7000,180);
CreateActor(20007,363.0000,314.0,1003.7000,180);
CreateActor(20014,357.0000,314.0,1003.7000,180);
CreateActor(20004,351.0000,314.0,1003.7000,180);
CreateActor(20012,345.0000,314.0,1003.7000,180);
CreateActor(20009,339.0000,314.0,1003.7000,180);
CreateActor(20010,333.0000,314.0,1003.7000,180);
CreateActor(20013,327.0000,314.0,1003.7000,180);


TownMilitiaSelectCheckpoint = CreateDynamicCP(288.0000,159.0,1012.0699-1, 2, -1, -1, -1, 3.0);
PoliceSelectCheckpoint = CreateDynamicCP(288.0000,165.0,1012.0699-1, 2, -1, -1, -1, 3.0);
SwatSelectCheckpoint = CreateDynamicCP(288.0000,171.0,1012.0699-1, 2, -1, -1, -1, 3.0);
MilitarySelectCheckpoint = CreateDynamicCP(288.0000,177.0,1012.0699-1, 2, -1, -1, -1, 3.0);
DeltaForceSelectCheckpoint = CreateDynamicCP(288.0000,183.0,1012.0699-1, 2, -1, -1, -1, 3.0);

Create3DTextLabel("{FF8080}Town Militia\n{FF8080}min level: {FFFFFF}1\n{FF8080}MAX HP: {FFFFFF}100", 0x008080FF, 290.0000,159.0,1012.0699, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Police Officer\n{FF8080}min level: {FFFFFF}10\n{FF8080}MAX HP: {FFFFFF}120", 0x008080FF, 290.0000,165.0,1012.0699, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Swat\n{FF8080}min level: {FFFFFF}25\n{FF8080}MAX HP: {FFFFFF}150", 0x008080FF, 290.0000,171.0,1012.0699, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Military\n{FF8080}min level: {FFFFFF}50\n{FF8080}MAX HP: {FFFFFF}170", 0x008080FF, 290.0000,177.0,1012.0699, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Delta Force\n{FF8080}min level: {FFFFFF}80\n{FF8080}MAX HP: {FFFFFF}200", 0x008080FF, 290.0000,183.0,1012.0699, 40.0, 0, 0);


WolfSelectCheckpoint = CreateDynamicCP(369.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
BearSelectCheckpoint = CreateDynamicCP(363.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
ZombieSelectCheckpoint = CreateDynamicCP(357.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
HumanMutantSelectCheckpoint = CreateDynamicCP(351.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
HumanLizardSelectCheckpoint = CreateDynamicCP(345.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
SkeletonSelectCheckpoint = CreateDynamicCP(339.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
BigfootSelectCheckpoint = CreateDynamicCP(333.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
AngelOfDeathSelectCheckpoint = CreateDynamicCP(327.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);

Create3DTextLabel("{FF8080}Wolf\n{FF8080}min level: {FFFFFF}1\n{FF8080}MAX HP: {FFFFFF}130", 0x008080FF, 369.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Bear\n{FF8080}min level: {FFFFFF}1\n{FF8080}MAX HP: {FFFFFF}160", 0x008080FF, 363.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Zombie\n{FF8080}min level: {FFFFFF}1\n{FF8080}MAX HP: {FFFFFF}200", 0x008080FF, 357.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}HumanMutant\n{FF8080}min level: {FFFFFF}15\n{FF8080}MAX HP: {FFFFFF}200", 0x008080FF, 351.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Swampmen\n{FF8080}min level: {FFFFFF}25\n{FF8080}MAX HP: {FFFFFF}250", 0x008080FF, 345.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Skeleton\n{FF8080}min level: {FFFFFF}40\n{FF8080}MAX HP: {FFFFFF}300", 0x008080FF, 339.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Bigfoot\n{FF8080}min level: {FFFFFF}60\n{FF8080}MAX HP: {FFFFFF}500", 0x008080FF, 333.0000,314.0,1003.7000, 40.0, 0, 0);
Create3DTextLabel("{FF8080}Angel of Death\n{FF8080}min level: {FFFFFF}80\n{FF8080}MAX HP: {FFFFFF}600", 0x008080FF, 327.0000,314.0,1003.7000, 40.0, 0, 0);

/*
AddPlayerClass(280 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(281 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(282 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(283 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(284 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(285 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(286 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
*/

AddPlayerClass(3 ,-8947.6201, 1662.8384, 3.9729, 0, 0, 0, 0, 0, 0, 0);//CIVILIAN
AddPlayerClass(71 ,-8947.6201, 1662.8384, 3.9729, 0, 0, 0, 0, 0, 0, 0);//MILITARY
AddPlayerClass(162 ,-8947.6201, 1662.8384, 3.9729, 0, 0, 0, 0, 0, 0, 0);//MONSTER

/*
AddPlayerClass(4 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(5 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(6 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(7 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(8 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(9 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(10 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(11 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(12 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(13 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(14 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(15 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(16 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(17 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(18 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(19 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(20 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(21 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(22 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(23 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(24 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(25 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(26 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(27 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(28 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(29 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(30 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(31 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(32 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(33 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(34 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(35 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(36 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(37 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(38 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(39 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(40 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(41 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(42 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(43 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(44 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(45 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(46 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(47 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(48 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(49 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(50 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(51 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(52 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(53 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(54 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(55 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(56 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(57 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(58 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(59 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(60 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(61 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(62 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(63 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(64 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(65 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(66 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(67 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(68 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(69 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(70 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(71 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(72 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(73 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);

AddPlayerClass(75 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(76 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(77 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(78 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(79 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(80 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(81 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(82 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(83 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(84 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(85 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(86 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(87 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(88 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(89 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(90 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(91 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(92 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(93 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(94 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(95 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(96 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(97 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(98 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(99 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(100 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(101 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(102 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(103 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(104 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(105 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(106 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(107 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(108 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(109 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(110 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(111 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(112 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(113 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(114 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(115 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(116 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(117 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(118 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(119 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(120 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(121 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(122 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(123 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(124 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(125 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(126 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(127 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(128 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(129 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(130 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(131 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(132 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(133 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(134 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(135 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(136 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(137 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(138 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(139 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(140 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(141 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(142 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(143 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(144 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(145 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(146 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(147 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(148 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(149 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(150 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(151 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(152 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(153 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(154 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(155 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(156 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(157 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(158 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(159 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(160 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(161 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(162 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(163 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(164 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(165 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(166 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(167 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(168 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(169 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(170 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(171 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(172 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(173 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(174 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(175 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(176 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(177 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(178 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(179 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(180 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(181 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(182 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(183 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(184 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(185 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(186 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(187 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(188 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(189 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(190 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(191 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(192 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(193 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(194 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(195 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(196 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(197 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(198 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(199 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(200 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(201 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(202 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(203 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(204 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(205 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(206 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(207 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(208 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(209 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(210 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(211 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(212 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(213 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(214 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(215 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(216 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(217 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(218 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(219 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(220 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(221 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(222 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(223 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(224 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(225 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(226 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(227 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(228 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(229 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(230 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(231 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(232 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(233 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(234 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(235 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(236 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(237 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(238 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(239 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(240 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(241 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(242 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(243 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(244 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(245 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(246 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(247 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(248 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(249 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(250 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(251 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(252 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(253 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(254 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(255 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(256 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(257 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(258 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(259 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(260 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(261 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(262 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(263 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(264 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);

AddPlayerClass(273 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(274 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(275 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(276 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(277 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(278 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(279 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);

//AddPlayerClass(287 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(288 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(289 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(290 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(291 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(292 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(293 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(294 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(295 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(296 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(297 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(298 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(299 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(300 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(301 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(302 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(303 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(304 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(305 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(306 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(307 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
AddPlayerClass(308 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(309 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(310 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
//AddPlayerClass(311 ,4880.5078,427.7530,210.9353, 0, 0, 0, 0, 0, 0, 0);
*/
//Vehicles
AddStaticVehicle(401,-5443.2563,2998.3181,4.7794,359.3508,52,52); //
AddStaticVehicle(405,-5368.0601,3034.6650,4.8750,41.0716,40,1); //
AddStaticVehicle(412,-5367.7920,3044.4575,4.8372,37.9883,27,1); //
AddStaticVehicle(413,-5376.9351,3060.3167,5.0794,221.5355,119,1); //
AddStaticVehicle(422,-5368.2783,3143.0212,4.9896,34.8945,101,25); //
AddStaticVehicle(426,-5376.6294,3119.4431,4.7429,224.5342,62,62); //
AddStaticVehicle(439,-5419.5176,3073.8284,4.8908,0.1695,67,8); //
AddStaticVehicle(440,-5477.9380,3154.7075,5.1048,359.6143,84,84); //
AddStaticVehicle(428,-5455.2168,3100.7949,5.1231,180.1786,4,75); //
AddStaticVehicle(445,-5475.9292,3026.4241,4.8749,89.5050,37,37); //
AddStaticVehicle(459,-5475.7881,3032.4370,5.0512,88.2689,51,51); //
AddStaticVehicle(461,-5475.6050,3035.8647,4.5859,90.1999,61,1); //
AddStaticVehicle(455,-5578.7563,3180.7144,5.4375,179.4951,1,31); //
AddStaticVehicle(462,-5514.1245,3155.2651,4.5986,181.5130,3,1); //
AddStaticVehicle(466,-5501.9009,3141.9094,4.7418,270.5036,78,76); //
AddStaticVehicle(475,-5502.2183,3133.8755,4.8049,270.2609,21,1); //
AddStaticVehicle(479,-5502.0205,3145.9663,4.7944,269.7444,54,31); //
AddStaticVehicle(467,-5499.3335,3072.8040,4.7355,89.3862,13,8); //
AddStaticVehicle(471,-5404.6050,2910.1738,4.4718,1.4028,120,113); //
AddStaticVehicle(474,-5421.1655,2983.4934,4.7577,269.5143,83,1); //
AddStaticVehicle(482,-5399.0977,2948.0769,5.1160,180.5759,41,41); //
AddStaticVehicle(483,-5377.4302,2868.6987,4.9824,178.5934,1,31); //
AddStaticVehicle(477,-5463.8911,2845.1870,5.4104,0.0725,101,1); //
AddStaticVehicle(468,-5516.0942,2877.4133,4.6592,180.3278,3,3); //
AddStaticVehicle(489,-5528.1909,2844.5806,5.1436,0.6300,120,123); //
AddStaticVehicle(492,-5530.6069,2868.4526,4.7718,179.2432,24,55); //
AddStaticVehicle(496,-5563.1611,2867.9880,4.7061,359.0395,22,22); //
AddStaticVehicle(495,-5592.4648,2838.1675,6.2202,359.0256,101,106); //
AddStaticVehicle(498,-5591.9072,2868.8850,5.0561,181.0061,37,107); //
AddStaticVehicle(500,-5600.9893,2917.1040,5.0937,90.5228,4,119); //
AddStaticVehicle(499,-5665.1006,2900.4980,4.9903,359.6935,109,25); //
AddStaticVehicle(507,-5636.8096,2922.5610,4.8241,359.7894,53,53); //
AddStaticVehicle(508,-5628.2729,2827.9351,6.3639,359.7079,1,1); //
AddStaticVehicle(516,-5512.0757,2946.9895,4.8339,179.1235,9,1); //
AddStaticVehicle(517,-5549.9268,3001.1025,4.8549,358.6284,51,72); //
AddStaticVehicle(518,-5553.5981,3142.8860,4.6709,89.8403,41,29); //
AddStaticVehicle(521,-5595.4824,3077.0088,4.5722,359.8679,118,118); //
AddStaticVehicle(526,-5578.8345,3129.9189,4.7617,269.7259,2,39); //
AddStaticVehicle(527,-5578.9438,3133.9333,4.7151,90.4437,66,1); //
AddStaticVehicle(533,-5578.5825,3150.0764,4.7044,269.4542,77,1); //
AddStaticVehicle(534,-5623.3047,3153.4207,4.7241,1.0346,7,7); //
AddStaticVehicle(535,-5575.1953,3027.7183,4.7542,179.9939,97,1); //
AddStaticVehicle(536,-5568.3965,2922.4111,4.7296,359.9353,57,96); //
AddStaticVehicle(540,-5650.1294,2999.4180,4.8597,359.1265,15,15); //
AddStaticVehicle(542,-5533.7222,3077.4907,4.7434,0.3417,13,118); //
AddStaticVehicle(543,-5650.0986,3148.0608,4.8153,0.5373,32,8); //
AddStaticVehicle(545,-5704.0552,3046.3940,4.8111,270.2277,44,96); //
AddStaticVehicle(546,-5677.3545,3124.8418,4.7245,88.9841,3,87); //
AddStaticVehicle(547,-5706.2329,3153.5723,4.7351,0.1212,24,1); //
AddStaticVehicle(549,-5711.4253,3179.4404,4.6871,177.2952,84,36); //
AddStaticVehicle(573,-5752.2393,3230.1926,5.6405,89.4311,85,6); //
AddStaticVehicle(578,-5660.1313,3180.7031,5.6243,180.3121,1,1); //
AddStaticVehicle(609,-5598.9492,3232.0732,5.0699,0.3921,36,36); //
AddStaticVehicle(600,-5652.4507,3260.3171,4.9392,178.0543,11,11); //
AddStaticVehicle(550,-5742.1230,3136.3787,4.8213,270.3470,62,62); //
AddStaticVehicle(551,-5742.0103,3103.6428,4.8007,179.6789,91,1); //
AddStaticVehicle(554,-5722.7935,3121.3225,5.0876,89.2374,14,32); //
AddStaticVehicle(555,-5678.8564,3079.1646,4.6844,90.8530,22,1); //
AddStaticVehicle(558,-5642.0962,3027.9697,4.6308,178.3814,40,1); //
AddStaticVehicle(559,-5703.6465,2840.1392,5.3716,359.6501,51,1); //
AddStaticVehicle(560,-5677.7124,2899.2786,4.7054,2.0784,9,39); //
AddStaticVehicle(561,-5705.0474,2921.4829,4.8136,271.2361,43,21); //
AddStaticVehicle(566,-5705.3638,2912.2183,4.7805,270.5475,84,8); //
AddStaticVehicle(562,-5757.0757,2843.7043,5.0970,359.4998,116,1); //
AddStaticVehicle(567,-5756.3750,2890.1479,4.8705,90.1779,99,81); //
AddStaticVehicle(565,-5754.0381,3048.6528,4.6236,87.8968,11,11); //
AddStaticVehicle(575,-5780.1191,3050.5715,4.6036,270.4461,66,96); //
AddStaticVehicle(576,-5813.5200,2998.6228,4.6094,270.5444,67,1); //
AddStaticVehicle(579,-5796.9917,2984.9517,4.9334,89.9487,42,42); //
AddStaticVehicle(580,-5800.1035,2920.8716,4.7961,1.5126,67,67); //
AddStaticVehicle(585,-5792.9878,2827.4224,5.5738,358.4332,62,62); //
AddStaticVehicle(587,-5866.9229,2845.9695,5.2332,0.2976,72,1); //
AddStaticVehicle(589,-5797.2432,2972.1418,4.6580,87.9473,124,124); //
AddStaticVehicle(588,-5791.0107,3102.4624,4.9028,180.0445,1,1); //
AddStaticVehicle(600,-5797.4170,2976.1714,4.7183,86.8059,67,8); //
AddStaticVehicle(602,-5725.1089,2999.9131,4.8060,357.9663,18,1); //
AddStaticVehicle(603,-5677.1831,2957.1304,4.8383,90.6009,32,1); //
AddStaticVehicle(581,-5590.7100,3000.5439,4.5964,0.3789,72,1); //
AddStaticVehicle(586,-5792.8770,3154.6816,4.5198,0.0178,13,1); //
AddStaticVehicle(579,-5828.4082,3154.4346,4.9319,180.3814,11,11); //
AddStaticVehicle(495,-5815.1763,3154.6628,5.3511,178.8818,114,108); //
AddStaticVehicle(475,-5856.1240,3121.6672,5.4003,270.4989,21,1); //
AddStaticVehicle(482,-5818.9277,3076.8340,5.1170,358.9844,85,85); //
AddStaticVehicle(438,-5701.9785,3062.7190,5.0041,269.5505,6,76); //
AddStaticVehicle(438,-5581.0527,3040.7971,5.0019,268.8274,6,76); //
AddStaticVehicle(426,-5933.3296,3163.5220,5.2970,269.6464,42,42); //
AddStaticVehicle(412,-5856.5454,2999.3630,4.8250,270.4132,37,8); //
AddStaticVehicle(418,-5856.4189,2933.6680,5.0905,270.3672,81,81); //
AddStaticVehicle(421,-5831.1528,2904.9761,4.8825,88.8008,4,1); //
AddStaticVehicle(466,-5933.3379,2858.7903,4.7334,270.2746,68,76); //
AddStaticVehicle(549,-5911.0479,2909.6453,4.6882,90.3064,84,36); //
AddStaticVehicle(576,-5933.9521,2974.4375,4.5981,270.4274,67,1); //
AddStaticVehicle(575,-5910.7432,3052.6553,5.2736,88.4850,19,96); //
AddStaticVehicle(479,-5933.2349,3099.6460,5.3351,270.2684,55,41); //
AddStaticVehicle(509,-5755.2451,3175.9932,4.5011,90.2190,36,1); //
AddStaticVehicle(509,-5623.0049,2899.1802,4.5070,272.1474,36,1); //
AddStaticVehicle(481,-5453.8804,2920.2832,4.5068,358.5434,46,46); //
AddStaticVehicle(416,-5448.0278,2998.4946,5.1492,356.3478,1,3); //
AddStaticVehicle(416,-5421.1353,2968.2180,5.1445,267.7223,1,3); //
AddStaticVehicle(407,-5456.3774,2979.7200,5.2329,1.3952,3,1); //
AddStaticVehicle(407,-5465.3315,2979.6284,5.2349,2.0597,3,1); //
AddStaticVehicle(544,-5473.5576,2980.2263,5.2367,1.2589,3,1); //
AddStaticVehicle(599,-5447.7798,2883.8213,5.1823,179.6103,0,1); //
AddStaticVehicle(599,-5452.3438,2883.7351,5.1794,180.6915,0,1); //
AddStaticVehicle(599,-5417.1479,2874.9629,5.1790,180.0103,0,1); //
AddStaticVehicle(599,-5428.1528,2875.5427,5.1775,179.1064,0,1); //
AddStaticVehicle(427,-5461.4053,2884.5266,5.1220,179.5271,0,1); //
AddStaticVehicle(523,-5397.0488,2879.4482,4.5610,181.9158,0,0); //
AddStaticVehicle(523,-5399.0757,2879.5920,4.5603,179.7138,0,0); //
AddStaticVehicle(430,-5383.9287,2797.7515,0.0985,181.8914,46,26); //
AddStaticVehicle(446,-5280.7056,3049.0015,-0.9692,355.9654,1,44); //
AddStaticVehicle(453,-5508.9243,3222.3726,-0.2648,0.3569,56,56); //
AddStaticVehicle(483,-7687.4546,2881.4802,4.9823,180.1867,1,31); //
AddStaticVehicle(505,-7698.6294,2881.4270,5.1336,358.8755,120,123); //
AddStaticVehicle(495,-7700.9834,2833.3010,5.3389,89.3183,88,99); //
AddStaticVehicle(508,-7731.4346,2877.0117,5.3650,269.2294,1,1); //
AddStaticVehicle(508,-7731.3062,2872.4873,5.3649,269.5544,1,1); //
AddStaticVehicle(508,-7732.1826,2887.6082,5.3649,88.9290,1,1); //
AddStaticVehicle(508,-7733.2329,2809.8403,5.3650,90.0671,1,1); //
AddStaticVehicle(422,-7678.2451,1964.9044,4.9774,268.9907,111,31); //
AddStaticVehicle(444,-7727.3765,1910.9987,5.3613,271.5594,32,14); //
AddStaticVehicle(462,-7698.0581,1925.4792,4.5893,222.6894,13,13); //
AddStaticVehicle(508,-7697.5933,1896.3302,5.3650,90.5553,1,1); //
AddStaticVehicle(508,-7712.6792,1949.7784,5.3651,88.5380,1,1); //
AddStaticVehicle(508,-7723.3838,1883.0106,5.3647,177.9603,1,1); //
AddStaticVehicle(554,-7681.8682,1902.9271,5.0772,268.3834,43,32); //
AddStaticVehicle(586,-7641.2671,1881.3374,4.4903,184.8170,8,1); //
AddStaticVehicle(600,-7637.3403,1880.5740,4.6864,359.1548,83,13); //
AddStaticVehicle(605,-7632.7739,1880.5470,4.7857,2.3785,11,11); //
AddStaticVehicle(489,-7628.4629,1880.3323,5.1136,0.6373,14,123); //
AddStaticVehicle(433,-7179.6987,1378.7316,5.4868,269.5449,43,0); //
AddStaticVehicle(433,-7179.6626,1383.5203,5.4870,268.9056,43,0); //
AddStaticVehicle(470,-7194.5044,1329.7426,4.9832,223.6809,43,0); //
AddStaticVehicle(470,-7184.0049,1286.7656,4.9833,270.0383,43,0); //
AddStaticVehicle(470,-7205.8560,1385.8844,4.9810,268.6822,43,0); //
AddStaticVehicle(470,-7205.6978,1390.3468,4.9841,266.6823,43,0); //
AddStaticVehicle(476,-7154.4033,1342.3004,5.7019,268.7910,77,87); //
AddStaticVehicle(476,-7154.5405,1308.5498,5.7017,269.1357,6,7); //
AddStaticVehicle(476,-7154.0659,1272.4373,5.6986,268.1642,1,6); //
AddStaticVehicle(476,-7155.2046,1238.4763,5.7014,268.6617,71,77); //
AddStaticVehicle(553,-7152.1782,1203.2770,6.3312,268.8222,55,23); //
AddStaticVehicle(453,-7662.4341,1804.4045,-0.0508,179.5577,56,56); //
AddStaticVehicle(453,-7674.8027,1804.0975,-0.6914,179.8115,56,56); //
AddStaticVehicle(453,-7784.1250,1804.5906,-0.4477,179.1009,56,56); //
AddStaticVehicle(473,-7771.9829,1812.8542,-0.0652,178.1371,56,53); //
AddStaticVehicle(473,-7820.3608,1868.9039,-0.0554,88.8612,56,53); //
AddStaticVehicle(472,-7820.4526,1878.3359,0.0996,91.7080,56,53); //
AddStaticVehicle(460,-7733.3013,1808.8290,2.0211,172.9886,1,30); //
AddStaticVehicle(543,-7848.6675,630.7060,4.7905,44.5315,67,8); //

AddStaticVehicle(487,-8382.7871,3823.8862,35.3274,159.8742,29,42); //
AddStaticVehicle(520,3892.2615,-3776.7383,87.1255,247.5810,0,0); //
AddStaticVehicle(520,-3702.1914,3301.8628,124.0752,243.9655,0,0); //
AddStaticVehicle(422,-6740.1924,3030.5142,4.9237,179.8659,113,36); //
AddStaticVehicle(434,-6793.2163,2216.6494,4.9577,359.8325,53,53); //
AddStaticVehicle(462,-6739.6079,1669.9946,4.5907,179.6616,3,1); //
AddStaticVehicle(466,-6749.2056,1689.5472,4.7318,90.8191,67,76); //
AddStaticVehicle(467,-5673.0747,1941.6433,4.7299,89.5950,22,1); //
AddStaticVehicle(478,-7669.9614,3305.7644,4.9849,90.5209,20,1); //
AddStaticVehicle(489,-7669.9326,3310.2756,5.1335,91.8415,13,118); //
AddStaticVehicle(512,-7724.9800,3331.8447,5.2735,88.8077,32,112); //
AddStaticVehicle(532,-7731.9111,3352.7700,5.9670,90.7844,0,0); //
AddStaticVehicle(531,-7755.1875,3292.8599,4.9178,89.2924,91,2); //
AddStaticVehicle(471,-7591.8228,1137.9451,4.4708,90.3199,74,83); //
AddStaticVehicle(479,-7578.4204,1118.7832,4.7839,269.4706,59,36); //
AddStaticVehicle(444,-7102.0771,627.1284,5.3613,89.1844,32,36); //
AddStaticVehicle(504,-7597.9951,97.1170,4.7824,179.7445,65,9); //
AddStaticVehicle(508,-6530.2485,324.4961,5.3650,134.2620,1,1); //
AddStaticVehicle(510,-6534.8413,344.1764,4.5980,179.6815,5,5); //
AddStaticVehicle(556,-5858.9189,465.4785,5.3650,223.2127,1,1); //
AddStaticVehicle(543,-6200.2642,907.1342,4.8068,87.6140,32,8); //
AddStaticVehicle(495,-5718.3540,-377.8108,5.3428,91.4569,88,99); //


for(new i = 0; i < MAX_VEHICLES; i++)
{
SetVehicleToRespawn(i);
}

Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 2000);
//LOADING MAP FROM INCLUDE SO WE CAN SELECT ALL THE OBJECTS MORE EASLY
#include "../include/MOBJ.inc"//MAP
#include "../include/CHM.inc"//CHILIAD
/*
new Float:DynamicObjectXX,Float:DynamicObjectYY,Float:DynamicObjectZZ;

for(new i=0; i<CountDynamicObjects(); i++)//CHILIAD MOUNTAIN MATERIAL
{
if(IsValidDynamicObject(i))
{
GetDynamicObjectPos(i, DynamicObjectXX, DynamicObjectYY, DynamicObjectZZ);
if(DynamicObjectXX > -15654.0000 && DynamicObjectYY > 266.0000 && DynamicObjectXX < -14663.0000 && DynamicObjectYY < 1373.0000)
{

if(GetDynamicObjectModel(i) == 18294 || GetDynamicObjectModel(i) == 18335 || GetDynamicObjectModel(i) == 18325 || GetDynamicObjectModel(i) == 18324
|| GetDynamicObjectModel(i) == 18315 || GetDynamicObjectModel(i) == 18306 || GetDynamicObjectModel(i) == 18300 || GetDynamicObjectModel(i) == 18296
|| GetDynamicObjectModel(i) == 18297 || GetDynamicObjectModel(i) == 18298 || GetDynamicObjectModel(i) == 18303 || GetDynamicObjectModel(i) == 18302
|| GetDynamicObjectModel(i) == 18301 || GetDynamicObjectModel(i) == 18469 || GetDynamicObjectModel(i) == 18308 || GetDynamicObjectModel(i) == 18307
|| GetDynamicObjectModel(i) == 18316 || GetDynamicObjectModel(i) == 18328 || GetDynamicObjectModel(i) == 18311 || GetDynamicObjectModel(i) == 18319
|| GetDynamicObjectModel(i) == 18310 || GetDynamicObjectModel(i) == 18317 || GetDynamicObjectModel(i) == 18318 || GetDynamicObjectModel(i) == 18309
|| GetDynamicObjectModel(i) == 18327 || GetDynamicObjectModel(i) == 18326 || GetDynamicObjectModel(i) == 18336 || GetDynamicObjectModel(i) == 18337
|| GetDynamicObjectModel(i) == 18329 || GetDynamicObjectModel(i) == 18330 || GetDynamicObjectModel(i) == 18320 || GetDynamicObjectModel(i) == 18312
|| GetDynamicObjectModel(i) == 18305 || GetDynamicObjectModel(i) == 18304 || GetDynamicObjectModel(i) == 18299 || GetDynamicObjectModel(i) == 18295
|| GetDynamicObjectModel(i) == 18294 || GetDynamicObjectModel(i) == 900)

{
SetDynamicObjectMaterial(i, 0, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 2, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 11429, "des_nw", "rocktbrn_dirt2", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 8462, "vgsecoast", "rocktbrn128", 0);
}

}
}
}
*/

//CreateDynamicObject(19530, -11396.39258, 2580.42407, -1.80646,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
//CreateDynamicObject(672, -11338.33691, 2577.51489, -1.81231,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);


CreateDynamicObject(18648,290.0000,159.0,1017.0704,0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18648,290.0000,165.0,1017.0704,0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18648,290.0000,171.0,1017.0704,0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18648,290.0000,177.0,1017.0704,0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18648,290.0000,183.0,1017.0704,0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);

CreateDynamicObject(18647,369.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,363.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,357.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,351.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,345.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,339.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,333.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(18647,327.0000,314.0,1008.7005,0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);

LandShip1 = CreateDynamicObject(10794, -8507.14063, 3123.33130, 3.45360,   0.00000, -15.00000, 225.00000, -1, -1, -1, 1500, 1500);
LandShip2 = CreateDynamicObject(10795, -8504.49316, 3125.98267, 12.62309,   0.00000, -15.00000, 225.00000, -1, -1, -1, 1500, 1500);
LandShip3 = CreateDynamicObject(10793, -8451.12109, 3179.33936, 11.96999,   0.00000, -15.00000, 225.00000, -1, -1, -1, 1500, 1500);

SetDynamicObjectMaterial(LandShip1, 0, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(LandShip1, 1, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(LandShip2, 0, 10820, "roadbridge_sfse", "ws_oldpainted2rusty", 0);
SetDynamicObjectMaterial(LandShip2, 1, 10820, "roadbridge_sfse", "ws_oldpainted2rusty", 0);
SetDynamicObjectMaterial(LandShip2, 2, 10820, "roadbridge_sfse", "ws_oldpainted2rusty", 0);
SetDynamicObjectMaterial(LandShip3, 0, 10820, "roadbridge_sfse", "ws_oldpainted2rusty", 0);
SetDynamicObjectMaterial(LandShip3, 4, 10820, "roadbridge_sfse", "ws_oldpainted2rusty", 0);
SetDynamicObjectMaterial(LandShip3, 5, 981, "helixbarrier", "rustb256128", 0);
SetDynamicObjectMaterial(LandShip3, 6, 981, "helixbarrier", "rustb256128", 0);
SetDynamicObjectMaterial(LandShip3, 7, 981, "helixbarrier", "rustb256128", 0);
SetDynamicObjectMaterial(LandShip3, 8, 981, "helixbarrier", "rustb256128", 0);
SetDynamicObjectMaterial(LandShip3, 9, 981, "helixbarrier", "rustb256128", 0);
SetDynamicObjectMaterial(LandShip3, 10, 981, "helixbarrier", "rustb256128", 0);
//TOWNS/VILLAGES
PortTownSign1 = CreateDynamicObject(19980, -5681.31396, 2796.66626, 2.81589,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
PortTownSign2 = CreateDynamicObject(19980, -5972.42334, 3002.86133, 2.81590,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);

new NetsVillageSign1 = CreateDynamicObject(19980, -7676.91016, 2023.14087, 3.06866,   0.00000, 0.00000, 180.00000, -1, -1, -1, 1500, 1500);//FARM
new NetsVillageSign2 = CreateDynamicObject(19980, -7602.93799, 1878.48853, 2.82892,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//CENTER

new GreenBurgSign1 = CreateDynamicObject(19980, -10516.37695, 1009.03223, 2.74289,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//FUNFAIR
new GreenBurgSign2 = CreateDynamicObject(19980, -10919.98730, 990.22888, 2.73928,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);//MUDLAND

new LakelynSign1 = CreateDynamicObject(19980, -12435.46680, 1856.81812, 2.62290,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);//

new BrownchesterSign1 = CreateDynamicObject(19980, -12884.08398, 814.77081, 2.81680,   0.00000, 0.00000, 180.00000, -1, -1, -1, 1500, 1500);//

SetDynamicObjectMaterialText(PortTownSign1,3, "PORT TOWN\nPOPULATION: 2174", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(PortTownSign2,3, "PORT TOWN\nPOPULATION: 2174", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(NetsVillageSign1,3, "NETS VILLAGE\nPOPULATION: 152", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(NetsVillageSign2,3, "NETS VILLAGE\nPOPULATION: 152", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(GreenBurgSign1,3, "GREENBURG\nPOPULATION: 279", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(GreenBurgSign2,3, "GREENBURG\nPOPULATION: 279", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(LakelynSign1,3, "LAKELYN\nPOPULATION: 41", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(BrownchesterSign1,3, "BROWNCHESTER\nPOPULATION: 312", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

//AREAS SIGNS
new EagleLandSign1 = CreateDynamicObject(19980, -5574.47607, 1976.04028, 3.01960,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//SA BRIDGE
new ArvyLandSign1 = CreateDynamicObject(19980, -5593.20557, 1976.04028, 3.01963,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//SA BRIDGE
new ArvyLandSign2 = CreateDynamicObject(19980, -8058.92383, 2767.34912, 2.47761,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);// PUMP
new ArvyLandSign3 = CreateDynamicObject(19980, -8108.97949, 642.38263, 2.60585,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);// FACTORY

new SpringValleySign1 = CreateDynamicObject(19980, -8586.80078, 2786.20825, 2.51784,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);// SAWMILL
new SpringValleySign2 = CreateDynamicObject(19980, -8552.89453, 661.82904, 2.39038,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//FUNFAIR
new SpringValleySign3 = CreateDynamicObject(19980, -12153.19434, 991.27563, 2.88288,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);//MUDLAND CONNECTION

new MudlandSign1 = CreateDynamicObject(19980, -12228.21582, 1009.21149, 2.43875,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);//SPRING VALLEY CONNECTION

SetDynamicObjectMaterialText(EagleLandSign1,3, "EAGLELAND ISLANDS", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFFFF8080, 1);
SetDynamicObjectMaterialText(ArvyLandSign1,3, "ARVY LAND", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(ArvyLandSign2,3, "ARVY LAND", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(ArvyLandSign3,3, "ARVY LAND", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(SpringValleySign1,3, "SPRING VALLEY", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(SpringValleySign2,3, "SPRING VALLEY", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);
SetDynamicObjectMaterialText(SpringValleySign3,3, "SPRING VALLEY", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

SetDynamicObjectMaterialText(MudlandSign1,3, "MUDLAND", OBJECT_MATERIAL_SIZE_128x128,"Clearview", 15, 1, 0xFFFFFFFF, 0xFF008040, 1);

MilitaryCage = CreateDynamicObject(19272, 294.40010, 179.42000, 1011.06990,   0.00000, 0.00000, 0.00000, -1, -1, -1, 250, 250);
MonsterCage = CreateDynamicObject(18759, 347.00130, 323.10500, 1002.70001,   0.00000, 0.00000, 0.00000, -1, -1, -1, 250, 250);



SetDynamicObjectMaterial(MilitaryCage, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);
SetDynamicObjectMaterial(MilitaryCage, 1, 14853, "gen_pol_vegas", "blue_carpet_256", 0);
SetDynamicObjectMaterial(MilitaryCage, 2, 14853, "gen_pol_vegas", "blue_carpet_256", 0);



SetDynamicObjectMaterial(MonsterCage, 0, 14853, "gen_pol_vegas", "office_wallnu1", 0);

//PYRAMID AREA
new Pyramid = CreateDynamicObject(9104, -16000.00000, 700.00000, 38.87010,   5.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
new PyramidTop = CreateDynamicObject(9100, -16000.00000, 700.00000, 38.87010,   5.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
new EgyptPointyThing = CreateDynamicObject(8397, -16000.00000, 512.43048, 8.50820,   0.00000, -10.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -16010.00000, 600.00000, 1.18271,   0.00000, -25.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -15990.00000, 600.00000, 2.60281,   0.00000, 15.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -16010.00000, 590.00000, 2.92450,   25.00000, 15.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -16010.00000, 580.00000, 2.52352,   0.00000, -60.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -16010.00000, 570.00000, 3.94570,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -16010.00000, 560.00000, 3.94570,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -15990.00000, 590.00000, 1.39135,   0.00000, 30.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -15990.00000, 580.00000, 3.94570,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -15990.00000, 570.00000, 2.51946,   -25.00000, 25.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(19943, -15990.00000, 560.00000, 3.94570,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11445, -15919.01758, 549.93066, 3.60828,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11443, -15903.77637, 562.39270, 3.95959,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11442, -15903.93652, 537.58258, 3.97118,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11441, -15926.21191, 518.92139, 3.97001,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11458, -15899.30762, 525.70392, 3.97670,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11442, -15929.20898, 806.19623, 3.96730,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(11443, -16049.67578, 426.51620, 3.96110,   0.00000, 0.00000, -90.00000, -1, -1, -1, 1500, 1500);


//Pyramid quartz
SetDynamicObjectMaterial(Pyramid, 0, 9135, "vgseseabed", "vgs_rockmid1a", 0xFF585858);
SetDynamicObjectMaterial(PyramidTop, 0, 9098, "vgesvhouse01", "venbuildwh_law2", 0);
//Pyramid red
SetDynamicObjectMaterial(Pyramid, 2, 9076, "sphinx01", "sphinxbody01_128", 0xFFFF0000);
//Other pointy pyramid
SetDynamicObjectMaterial(EgyptPointyThing, 0, 9076, "sphinx01", "sphinxbody01_128", 0);

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19943)
{
SetDynamicObjectMaterial(i, 0, 3494, "luxorpillar04", "block2bb", 0);
SetDynamicObjectMaterial(i, 1, 3494, "luxorpillar04", "block2bb", 0);
}
}
}


//MILITARY AREA NEAR CHILIAD
new AntennaRustyChiliad = CreateDynamicObject(16335, -14786.45898, 251.93860, -23.61260,   15.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
new BigEarRustyChiliad = CreateDynamicObject(16613, -14815.67773, 265.60126, -25.54646,   0.00000, -45.00000, 0.00000, -1, -1, -1, 1500, 1500);
new RustyObject1Chiliad = CreateDynamicObject(3256, -14769.93652, 289.45410, 2.15830,   0.00000, 15.00000, 0.00000, -1, -1, -1, 1500, 1500);
new RustyObject2Chiliad = CreateDynamicObject(3259, -14906.46387, 229.51411, 3.89633,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);

SetDynamicObjectMaterial(AntennaRustyChiliad, 0, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 1, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 2, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 3, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 4, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 5, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 6, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 7, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 8, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 9, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(AntennaRustyChiliad, 10, 3900, "station", "rustd64", 0);

SetDynamicObjectMaterial(BigEarRustyChiliad, 0, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 1, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 2, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 3, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 4, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 5, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 6, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 7, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 8, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 9, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 10, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 11, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 12, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 13, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 14, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 15, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 16, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 17, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 18, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 19, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 20, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 21, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 22, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 23, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 24, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 25, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 26, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 27, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 28, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 29, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 30, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 31, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 32, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 33, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 34, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 35, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 36, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(BigEarRustyChiliad, 37, 13002, "sw_smlfarm", "Gen_Rusty_Poll", 0);

SetDynamicObjectMaterial(RustyObject1Chiliad, 0, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 1, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 2, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 3, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 4, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 5, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 6, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 7, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject1Chiliad, 8, 3900, "station", "rustd64", 0);

SetDynamicObjectMaterial(RustyObject2Chiliad, 0, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 1, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 2, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 3, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 4, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 5, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 6, 3900, "station", "rustd64", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 7, 12937, "sw_oldshack", "rustc256128", 0);
SetDynamicObjectMaterial(RustyObject2Chiliad, 8, 3900, "station", "rustd64", 0);

//
/*
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
SetDynamicObjectMaterial(i, 0, 10412, "hotel1", "carpet_red_256", 0);
}
}
}
//
*/

//

//Getting dynamic objects pos
new Float:DynamicObjectX,Float:DynamicObjectY,Float:DynamicObjectZ;


//SETTING GROUNDS WHERE THERE SHOULD NOT BE ADDED DETAILS
/*
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{

GroundAddDetails[i] = 1;

}
}
}
*/

/*
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -7915.9277 && DynamicObjectY > 3202.5962 && DynamicObjectX < -7641.0449 && DynamicObjectY < 3353.0530)
{

GroundAddDetails[i] = false;

}
}
}
}
*/


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////AREA 1, PORT TOWN ISLAND//////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//GENERATING FLOWERS AND GRASS ON GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{

//CreateDynamicObject(869, DynamicObjectX, DynamicObjectY, DynamicObjectZ,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(869, DynamicObjectX, DynamicObjectY, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+10, DynamicObjectY+10, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+16.3241, DynamicObjectY-16.8728, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-8.3913, DynamicObjectY-28.2531, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-23.6295, DynamicObjectY-14.0293, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-25.6072, DynamicObjectY+10.5937, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(856, DynamicObjectX-7.5701, DynamicObjectY+29.3049, DynamicObjectZ+0.0970,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-37.2093, DynamicObjectY+39.5876, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-55.2065, DynamicObjectY+21.6709, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-37.4923, DynamicObjectY-2.8781, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(856, DynamicObjectX-27.4306, DynamicObjectY-47.3857, DynamicObjectZ+0.0970,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX-46.5787, DynamicObjectY-39.1897, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+11.1620, DynamicObjectY+45.9859, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+25.8258, DynamicObjectY+15.3940, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+23.5006, DynamicObjectY-49.0896, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(856, DynamicObjectX+41.3076, DynamicObjectY-32.8304, DynamicObjectZ+0.0970,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+55.6909, DynamicObjectY-52.1196, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+50.0708, DynamicObjectY+0.7781, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+26.5860, DynamicObjectY+44.9322, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(869, DynamicObjectX+54.3392, DynamicObjectY+38.7766, DynamicObjectZ+0.4100,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(874, DynamicObjectX-31.5734, DynamicObjectY-33.5671, DynamicObjectZ+1.5914,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(874, DynamicObjectX-51.2795, DynamicObjectY-3.9206, DynamicObjectZ+1.5914,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(874, DynamicObjectX+20.4082, DynamicObjectY-3.7304, DynamicObjectZ+1.5914,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(874, DynamicObjectX+45.4881, DynamicObjectY+49.3882, DynamicObjectZ+1.5914,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);

}
}
}
}



//TREES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18273)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFFD9D306);
SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFFD9D306);
//SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFF8000FF);
//SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF8000FF);
}
}
}
}

//GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//

//Mountains
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11695)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11696)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//EDGES
//BIG
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19542)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//OTHER EDGES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19541)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19549)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19546)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19540)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19539)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}


//CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19545)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

//BIG CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19531)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19538)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

//MESA MOUNTAINS

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16258)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 3, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 4, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 11694, "des_sw", "grassbrn2rockbrn", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16097)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 3, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16201)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 3, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 4, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 6, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 7, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 8, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}


for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16253)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 3, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 4, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 5, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 6, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 7, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 8, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 9, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 10, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 11, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 12, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 13, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 14, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 15, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 16, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16163)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 3, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 4, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 5, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 6, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 7, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 8, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 9, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 10, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 11, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 12, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 13, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 14, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 15, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 16, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16195)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);//
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);//
SetDynamicObjectMaterial(i, 2, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);//
SetDynamicObjectMaterial(i, 3, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 4, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 5, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 3, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}

}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -8250.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -5100.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 1, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
SetDynamicObjectMaterial(i, 2, 11694, "des_sw", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 11694, "des_sw", "grassbrn2rockbrn", 0);
SetDynamicObjectMaterial(i, 4, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}


//

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////AREA 2, REST VALLEY GREEN GRASS AREA//////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//GENERATING GRASS, FLOWERS AND ROCKS


new Area2Flower1;
new Area2Flower2;
new Area2Flower3;
new Area2Flower4;
new Area2Flower5;
new Area2Flower6;
new Area2Flower7;
new Area2Flower8;
new Area2Flower9;
new Area2Flower10;
new Area2Flower11;
new Area2Flower12;
new Area2Flower13;
new Area2Flower14;
new Area2Flower15;

new Area1FlowerPaternColor = 0;


for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{

//CreateDynamicObject(869, DynamicObjectX, DynamicObjectY, DynamicObjectZ,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
Area2Flower1 = CreateDynamicObject(878, DynamicObjectX, DynamicObjectY, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower2 = CreateDynamicObject(878, DynamicObjectX-21.2414, DynamicObjectY-20.4011, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower3 = CreateDynamicObject(878, DynamicObjectX-4.3855, DynamicObjectY-36.3503, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower4 = CreateDynamicObject(878, DynamicObjectX-46.1033, DynamicObjectY-47.6543, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower5 = CreateDynamicObject(878, DynamicObjectX-37.1955, DynamicObjectY-5.6163, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower6 = CreateDynamicObject(878, DynamicObjectX-53.8209, DynamicObjectY+55.0603, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower7 = CreateDynamicObject(878, DynamicObjectX-12.2107, DynamicObjectY+31.9063, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower8 = CreateDynamicObject(878, DynamicObjectX+23.4034, DynamicObjectY+21.3741, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower9 = CreateDynamicObject(878, DynamicObjectX+50.0177, DynamicObjectY-8.1723, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower10 = CreateDynamicObject(878, DynamicObjectX+31.5952, DynamicObjectY-34.4510, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower11 = CreateDynamicObject(878, DynamicObjectX+55.8011, DynamicObjectY+32.1227, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower12 = CreateDynamicObject(878, DynamicObjectX-21.5182, DynamicObjectY-39.4661, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower13 = CreateDynamicObject(878, DynamicObjectX+4.3379, DynamicObjectY+17.9429, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower14 = CreateDynamicObject(878, DynamicObjectX-52.0611, DynamicObjectY+5.4947, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area2Flower15 = CreateDynamicObject(878, DynamicObjectX+49.2464, DynamicObjectY+12.9900, DynamicObjectZ+1.5199,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(804, DynamicObjectX+4.1168, DynamicObjectY-41.3866, DynamicObjectZ+0.7720,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(804, DynamicObjectX-34.6891, DynamicObjectY+15.7032, DynamicObjectZ+0.7720,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(804, DynamicObjectX+30.0441, DynamicObjectY-1.2974, DynamicObjectZ+0.7720,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(827, DynamicObjectX-33.6298, DynamicObjectY-30.6342, DynamicObjectZ+3.2367,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(827, DynamicObjectX+34.4198, DynamicObjectY+34.1769, DynamicObjectZ+3.2367,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(879, DynamicObjectX+15.2614, DynamicObjectY-38.3863, DynamicObjectZ+0.2113,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(879, DynamicObjectX-48.2684, DynamicObjectY-21.4284, DynamicObjectZ+0.2113,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(879, DynamicObjectX+22.2131, DynamicObjectY+45.9174, DynamicObjectZ+0.2113,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);

Area1FlowerPaternColor = random(3);

//SetDynamicObjectMaterial(flowertest, 0,  8617, "vgseflowers", "starflower3", 0xFFFF0000);//RED
//SetDynamicObjectMaterial(flowertest2, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);//PURPLE
//SetDynamicObjectMaterial(flowertest3, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);//YELLOW
//SetDynamicObjectMaterial(flowertest4, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);//PINK PURPLE
//SetDynamicObjectMaterial(flowertest5, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);//BLUE


if(Area1FlowerPaternColor == 0)
{
SetDynamicObjectMaterial(Area2Flower1, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower2, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower3, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower4, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower5, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower6, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower7, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower8, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower9, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower10, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower11, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower12, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower13, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower14, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower15, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
}
else if(Area1FlowerPaternColor == 1)
{
SetDynamicObjectMaterial(Area2Flower1, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower2, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower3, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower4, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower5, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower6, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower7, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower8, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower9, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower10, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower11, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower12, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower13, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower14, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower15, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
}
else if(Area1FlowerPaternColor == 2)
{
SetDynamicObjectMaterial(Area2Flower1, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower2, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower3, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower4, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower5, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower6, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower7, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower8, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower9, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower10, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
SetDynamicObjectMaterial(Area2Flower11, 0, 8835, "vgsebushes", "starflower4", 0xFFFFFF00);
SetDynamicObjectMaterial(Area2Flower12, 0, 4830, "airport2", "bevflower2", 0xFFFF0080);
SetDynamicObjectMaterial(Area2Flower13, 0, 3946, "bistro_plants", "starflower4", 0xFF0000FF);
SetDynamicObjectMaterial(Area2Flower14, 0, 8617, "vgseflowers", "starflower3", 0xFFFF0000);
SetDynamicObjectMaterial(Area2Flower15, 0, 8835, "vgsebushes", "starflower1", 0xFF8000FF);
}

}
}
}
}




//TREES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18273)
{//-12200
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 1, 672, "gta_tree_boak", "newtreeleaves128", 0xFF319538);
//SetDynamicObjectMaterial(i, 2, 672, "gta_tree_boak", "newtreeleaves128", 0xFF319538);
SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFF319538);
SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF319538);
}
}
}
}

//GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 19550, "beach_sfs", "Grass_128HV", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
}
}
}
}
//

//Mountains
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 19550, "beach_sfs", "Grass_128HV", 0);
SetDynamicObjectMaterial(i, 1, 19550, "beach_sfs", "Grass_128HV", 0);
SetDynamicObjectMaterial(i, 2, 9530, "sandy_sfw", "NEWrockgrass_sfw", 0);
SetDynamicObjectMaterial(i, 3, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11695)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 19550, "beach_sfs", "Grass_128HV", 0);
SetDynamicObjectMaterial(i, 1, 19550, "beach_sfs", "Grass_128HV", 0);
SetDynamicObjectMaterial(i, 2, 9530, "sandy_sfw", "NEWrockgrass_sfw", 0);
SetDynamicObjectMaterial(i, 4, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11696)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 2, 19550, "beach_sfs", "Grass_128HV", 0);
}
}
}
}
//MOUNTAINS SMALLER
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17135)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 1, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 2, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 3, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 4, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 5, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 6, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 7, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 8, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 9, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 10, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17124)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 1, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 2, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 3, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 4, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 5, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 6, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 7, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 8, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
}
}
}
}
//ALL SMALLER ROCKS

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17472 || GetDynamicObjectModel(i) == 16104 || GetDynamicObjectModel(i) == 16131 || GetDynamicObjectModel(i) == 17076)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
SetDynamicObjectMaterial(i, 1, 9530, "sandy_sfw", "cst_rock_coast_sfw", 0);
}
}
}
}

//EDGES
//BIG
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19542)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//OTHER EDGES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19541)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19549)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19546)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19540)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}
//

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19539)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
//SetDynamicObjectMaterial(i, 0, 4595, "crparkgm_lan2", "sl_sfngrass01", 0);
//SetDynamicObjectMaterial(i, 1, 4101, "stapl", "sl_sfngrssdrt01", 0);
//SetDynamicObjectMaterial(i, 2, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 3, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
//SetDynamicObjectMaterial(i, 4, 9223, "newstuff_sfn", "sl_sfndirt01", 0);
}
}
}
}


//CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19545)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19538)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19531)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -12200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -8300.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////AREA 3, MUDDY AREA////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


for(new i=0; i<CountDynamicObjects(); i++)
{

new Area3CactusBush1;
new Area3CactusBush2;
new Area3CactusBush3;
new Area3CactusBush4;
new Area3CactusBush5;
new Area3CactusBush6;

if(IsValidDynamicObject(i))
{
//DETAIL GENERATION CACTUS AND ROCKS
if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{

//CreateDynamicObject(869, DynamicObjectX, DynamicObjectY, DynamicObjectZ,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
Area3CactusBush1 = CreateDynamicObject(874, DynamicObjectX, DynamicObjectY, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area3CactusBush2 = CreateDynamicObject(874, DynamicObjectX-35.6188, DynamicObjectY-37.6982, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area3CactusBush3 = CreateDynamicObject(874, DynamicObjectX-36.0631, DynamicObjectY+1.3673, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area3CactusBush4 = CreateDynamicObject(874, DynamicObjectX-11.3658, DynamicObjectY+38.1512, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area3CactusBush5 = CreateDynamicObject(874, DynamicObjectX+34.8955, DynamicObjectY-35.9125, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
Area3CactusBush6 = CreateDynamicObject(874, DynamicObjectX+34.8955, DynamicObjectY+50.1686, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(650, DynamicObjectX+11.5115, DynamicObjectY-18.5529, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(651, DynamicObjectX-21.0434, DynamicObjectY-50.6290, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(653, DynamicObjectX-26.3393, DynamicObjectY-9.3681, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(650, DynamicObjectX+34.8190, DynamicObjectY-50.1927, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(651, DynamicObjectX+43.7561, DynamicObjectY+29.3388, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(653, DynamicObjectX+52.2112, DynamicObjectY-40.9585, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(651, DynamicObjectX-52.1158, DynamicObjectY-20.3823, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(650, DynamicObjectX+2.8808, DynamicObjectY+56.9994, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(682, DynamicObjectX-6.7715, DynamicObjectY-38.7551, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(682, DynamicObjectX+27.1705, DynamicObjectY+33.0223, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(744, DynamicObjectX-47.6980, DynamicObjectY-29.7731, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(744, DynamicObjectX+38.8961, DynamicObjectY+6.4966, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(744, DynamicObjectX-32.4485, DynamicObjectY+42.8442, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(758, DynamicObjectX+9.3611, DynamicObjectY-39.0681, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(758, DynamicObjectX-56.1616, DynamicObjectY+36.2674, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(758, DynamicObjectX+54.3013, DynamicObjectY-16.0923, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(748, DynamicObjectX+22.7759, DynamicObjectY+3.4918, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);
CreateDynamicObject(748, DynamicObjectX-21.6649, DynamicObjectY-29.2929, DynamicObjectZ,   0.00000, 0.00000, random(361), -1, -1, -1, 250, 250);







SetDynamicObjectMaterial(Area3CactusBush1, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);
SetDynamicObjectMaterial(Area3CactusBush2, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);
SetDynamicObjectMaterial(Area3CactusBush3, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);
SetDynamicObjectMaterial(Area3CactusBush4, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);
SetDynamicObjectMaterial(Area3CactusBush5, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);
SetDynamicObjectMaterial(Area3CactusBush6, 0, 675, "gta_deserttrees", "sm_josh_leaf", 0);

}
}
}
}


//TREES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18273)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFFA25151);
SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFFA25151);
}
}
}
}

//GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//

//Mountains
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 1, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 2, 11429, "des_nw", "rocktbrn_dirt2", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11695)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 1, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 2, 11429, "des_nw", "rocktbrn_dirt2", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11696)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 2, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 3, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 4, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 5, 7250, "vgncoast", "vgs_rockmid1a", 0);
}
}
}
}

//MOUNTAINS SMALLER
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17135)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 6, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 7, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 8, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 9, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 10, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17124)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 6, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 7, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 8, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}

//EDGES
//BIG
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19542)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//OTHER EDGES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19541)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
//ORIGINAL if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19549)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19546)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19540)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19539)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13750.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//CLIFF WALL

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0xFF532900);
//SetDynamicObjectMaterial(i, 0, 11693, "beach_sfs", "Grass_128HV", 0xFF745305);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18751)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 2, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 3, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
}
}
}
}



//SMALLER ROCKS ON BIG CLIFF WALL

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16114)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13769.1191 && DynamicObjectY > -299.8332 && DynamicObjectX < -13219.1787 && DynamicObjectY < 3567.9495 && DynamicObjectZ > 50)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18228)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13769.1191 && DynamicObjectY > -299.8332 && DynamicObjectX < -13219.1787 && DynamicObjectY < 3567.9495 && DynamicObjectZ > 50)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16121)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -13769.1191 && DynamicObjectY > -299.8332 && DynamicObjectX < -13219.1787 && DynamicObjectY < 3567.9495 && DynamicObjectZ > 50)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0);
}
}
}
}

//SMALLER ROCKS
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16112)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12150.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 3694, "ryderholes", "ryder_mud", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17472)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12150.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 3694, "ryderholes", "ryder_mud", 0);
SetDynamicObjectMaterial(i, 1, 3694, "ryderholes", "ryder_mud", 0);
}
}
}
}


//CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19545)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19538)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16200.0000 && DynamicObjectY > -500.0000 && DynamicObjectX < -12200.0000 && DynamicObjectY < 3600.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////AREA 4, DARK AREA/////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//TREES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18273)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
//SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFF8000FF);
SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF8000FF);
SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF8000FF);
}
}
}
}


//GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
}
}
}
}
//

//Mountains
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 1, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 2, 11429, "des_nw", "rocktbrn_dirt2", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11695)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 1, 9135, "vgseseabed", "sw_sand", 0);
SetDynamicObjectMaterial(i, 2, 11429, "des_nw", "rocktbrn_dirt2", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11696)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 2, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 3, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 4, 7250, "vgncoast", "vgs_rockmid1a", 0);
SetDynamicObjectMaterial(i, 5, 7250, "vgncoast", "vgs_rockmid1a", 0);
}
}
}
}

//MOUNTAINS SMALLER
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17135)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 6, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 7, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 8, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 9, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 10, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17124)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 1, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 2, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 3, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 4, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 5, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 6, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 7, 8462, "vgsecoast", "rocktbrn128", 0);
SetDynamicObjectMaterial(i, 8, 8462, "vgsecoast", "rocktbrn128", 0);
}
}
}
}

//EDGES
//BIG
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19542)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//OTHER EDGES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19541)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19549)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19546)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19540)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19539)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18331, "cs_forest", "desertstones256", 0);
SetDynamicObjectMaterial(i, 1, 16246, "des_se4", "desstones_dirt1", 0);
SetDynamicObjectMaterial(i, 2, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 3, 16251, "des_n", "des_dirt1", 0);
SetDynamicObjectMaterial(i, 4, 16251, "des_n", "des_dirt1", 0);
}
}
}
}
//CLIFF WALL

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11693)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0xFF532900);
//SetDynamicObjectMaterial(i, 0, 11693, "beach_sfs", "Grass_128HV", 0xFF745305);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18751)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 1, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 2, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
SetDynamicObjectMaterial(i, 3, 7250, "vgncoast", "vgs_rockmid1a", 0xFF745305);
}
}
}
}



//SMALLER ROCKS
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16112)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 3694, "ryderholes", "ryder_mud", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17472)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 3694, "ryderholes", "ryder_mud", 0);
SetDynamicObjectMaterial(i, 1, 3694, "ryderholes", "ryder_mud", 0);
}
}
}
}


//CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19545)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19538)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}

//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////AREA 4, DARK AREA/////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*
//TREES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 18273)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
//SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "tree19Mi", 0xFF8000FF);
SetDynamicObjectMaterial(i, 1, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF8000FF);
SetDynamicObjectMaterial(i, 2, 18273, "mtbtrackcs_t", "sm_redwood_branch", 0xFF8000FF);
}
}
}
}


//GROUND

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19550)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19529)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19536)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19548)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19547)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19543)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//

//Mountains
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11694)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11695)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 11696)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 5, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}

//MOUNTAINS SMALLER
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17135)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 5, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 6, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 7, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 8, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 9, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 10, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17124)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 5, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 6, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 7, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 8, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}

//EDGES
//BIG
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19542)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//OTHER EDGES
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19541)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);

if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19549)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19546)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19540)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}
//

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19539)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 2, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 3, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 4, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}



//SMALLER ROCKS
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 16112)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 17472)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 18982, "mattextures", "BlueFoil", 0);
SetDynamicObjectMaterial(i, 1, 18982, "mattextures", "BlueFoil", 0);
}
}
}
}


//CONCRETE

for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19545)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
//
for(new i=0; i<CountDynamicObjects(); i++)
{
if(IsValidDynamicObject(i))
{

if(GetDynamicObjectModel(i) == 19538)
{
GetDynamicObjectPos(i, DynamicObjectX, DynamicObjectY, DynamicObjectZ);
if(DynamicObjectX > -16270.0000 && DynamicObjectY > -375.0000 && DynamicObjectX < -13688.0000 && DynamicObjectY < 3317.0000)
{
SetDynamicObjectMaterial(i, 0, 8661, "gnhotel1", "greyground256", 0);
}
}
}
}
*/

////////////////////////////////////////////////////////////////////////////////
//ROADS ALL AREAS
for(new i=0; i<CountDynamicObjects(); i++)
	{
		if(IsValidDynamicObject(i))
		{
			//Road textures, making them darker
			if(GetDynamicObjectModel(i) == 19533)
			{
				SetDynamicObjectMaterial(i, 0, 10867, "genroads_sfse", "sf_junction5", 0);
				SetDynamicObjectMaterial(i, 2, 8661, "gnhotel1", "greyground256", 0);
			}
			if(GetDynamicObjectModel(i) == 19535)
			{
				SetDynamicObjectMaterial(i, 0, 10867, "genroads_sfse", "sf_junction5", 0);
				SetDynamicObjectMaterial(i, 2, 8661, "gnhotel1", "greyground256", 0);
			}
			if(GetDynamicObjectModel(i) == 19534)
			{
				SetDynamicObjectMaterial(i, 0, 10867, "genroads_sfse", "sf_junction5", 0);
				SetDynamicObjectMaterial(i, 2, 8661, "gnhotel1", "greyground256", 0);
			}
			if(GetDynamicObjectModel(i) == 19532)
			{
				SetDynamicObjectMaterial(i, 0, 10867, "genroads_sfse", "sf_junction5", 0);
				SetDynamicObjectMaterial(i, 2, 8661, "gnhotel1", "greyground256", 0);
			}
}
}

//OBJECTS WHO NEED TXD CHANGE AFTER ALREADY HAVING TEXTURE CHANGED

new WheatFarmGround = CreateDynamicObject(19550, -7862.23779, 3299.22485, 3.94000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
SetDynamicObjectMaterial(WheatFarmGround, 0, 17079, "cuntwland", "forestfloor4", 0);


return 1;
}



public OnGameModeExit()
{
return 1;
}



//AlienShipSequence = 0

public OnDynamicObjectMoved(objectid)
{

if(objectid == AlienShipLazerBeam)
{
new Float:x, Float:y, Float:z;
GetDynamicObjectPos(AlienShipLazerBeam, x, y, z);
CreateExplosion(x, y, z, 0, 20.0);
CreateExplosion(x+5, y, z, 0, 20.0);
CreateExplosion(x, y+5, z, 0, 20.0);

CreateExplosion(x-5, y, z, 0, 20.0);
CreateExplosion(x, y-5, z, 0, 20.0);
DestroyDynamicObject(AlienShipLazerBeam);
AlienShipAction();
}

if(AlienShipSequence == 0)
{

	if(objectid == AlienShipObject1 || objectid == AlienShipObject2 || objectid == AlienShipObject3 || objectid == AlienShipObject4)
	{
	AlienShipFinishedMoving = AlienShipFinishedMoving+1;
	if(AlienShipFinishedMoving == 4)
	{
		AlienShipFinishedMoving = 0;
	

		SendClientMessageToAll(-1, "{FF0000}Port Town {FFFFFF}is being attacked by an alien spaceship! Requesting all units for defence.");
		MoveDynamicObject(AlienShipObject1, -5690.3330,3048.4541,80.0000, 30, 0, 0, 180);
		MoveDynamicObject(AlienShipObject2, -5690.3330,3048.4541,80.0000, 30, 0, 0, 270);
		MoveDynamicObject(AlienShipObject3, -5690.3330,3048.4541,87.3600, 30, 0, 180, 180);
		MoveDynamicObject(AlienShipObject4, -5690.3330,3048.4541,87.3600, 30, 0, 180, 270);
		AlienShipSequence = 1;
		}
		
		

	}

}
else if(AlienShipSequence == 1)
{
	if(objectid == AlienShipObject1 || objectid == AlienShipObject2 || objectid == AlienShipObject3 || objectid == AlienShipObject4)
	{
	AlienShipFinishedMoving = AlienShipFinishedMoving+1;
	if(AlienShipFinishedMoving == 4)
	{
		AlienShipFinishedMoving = 0;

		
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(AlienShipObject1, x, y, z);
        AlienShipLazerBeam = CreateDynamicObject(18728, x, y, z,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
		MoveDynamicObject(AlienShipLazerBeam, -5690.3330,3048.4541,4.8000, 30, 0, 0, 0);
		AlienShipSequence = 2;
		AlienShipAction();
	}



	}

}

else if(AlienShipSequence == 3)
{
DestroyDynamicObject(AlienShipObject1);
DestroyDynamicObject(AlienShipObject2);
DestroyDynamicObject(AlienShipObject3);
DestroyDynamicObject(AlienShipObject4);

AlienShipSequence = 0;
AlienShipFinishedMoving = 0;
AlienShipDamageLevel = 0;
AlienShipHealth = 10000;

new Float:AlienShipPosXXX;
new Float:AlienShipPosYYY;
new Float:AlienShipPosZZZ;

KillTimer(AlienShipAttackEndTimer);

for(new i=0; i<CountDynamicObjects(); i++)//Destroying Any Lazer Beam that might be left
	{
	if(IsValidDynamicObject(i))
		{

		if(GetDynamicObjectModel(i) == 18728)
			{
			GetDynamicObjectPos(i, AlienShipPosXXX, AlienShipPosYYY, AlienShipPosZZZ);
			if(AlienShipPosXXX > -5835.2344 && AlienShipPosYYY > 2936.5156 && AlienShipPosXXX < -5561.9634 && AlienShipPosYYY < 3165.0007)
			{
			DestroyDynamicObject(i);
			}
			}
		}
	}

}




return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{

	if(objectid == AlienShipObject1 || objectid == AlienShipObject2 || objectid == AlienShipObject3 || objectid == AlienShipObject4)
	{
	    if(AlienShipSequence == 2)
		{
		new Float:PlayerWhoShotX;
		new Float:PlayerWhoShotY;
		new Float:PlayerWhoShotZ;
		GetPlayerPos(playerid, PlayerWhoShotX, PlayerWhoShotY, PlayerWhoShotZ);
		if(PlayerWhoShotX > -5835.2344 && PlayerWhoShotY > 2936.5156 && PlayerWhoShotX < -5561.9634 && PlayerWhoShotY < 3165.0007)
		{
		
		AlienShipHealth = AlienShipHealth-20;
		if(weaponid == 35)
		{
		AlienShipHealth = AlienShipHealth-500;
		}
	
	    if(AlienShipDamageLevel == 0)
		{
		if(AlienShipHealth <= 7500)
		{
		SendClientMessageToAll(-1,"{FFFFFF}The {FF0000}Alien Ship {FFFFFF}now has less than 7500hp!");
		AlienShipDamageLevel = 1;
		
		new Float:PlayerPosX;
		new Float:PlayerPosY;
		new Float:PlayerPosZ;
		for(new i=0;i<MAX_PLAYERS;i=i+1)
		{
			if(IsPlayerConnected(i))
			{
				GetPlayerPos(i, PlayerPosX, PlayerPosY, PlayerPosZ);

				if(PlayerPosX > -5835.2344 && PlayerPosY > 2936.5156 && PlayerPosX < -5561.9634 && PlayerPosY < 3165.0007)
				{
				PlayerPlaySound(i, 5202, 0, 0, 0);
				}
			}
		}
		
		}
		}
	
	    else if(AlienShipDamageLevel == 1)
		{
		if(AlienShipHealth <= 5000)
		{
		SendClientMessageToAll(-1,"{FFFFFF}The {FF0000}Alien Ship {FFFFFF}now has less than 5000hp!");
		AlienShipDamageLevel = 2;
		
		new Float:PlayerPosX;
		new Float:PlayerPosY;
		new Float:PlayerPosZ;
		for(new i=0;i<MAX_PLAYERS;i=i+1)
		{
			if(IsPlayerConnected(i))
			{
				GetPlayerPos(i, PlayerPosX, PlayerPosY, PlayerPosZ);

				if(PlayerPosX > -5835.2344 && PlayerPosY > 2936.5156 && PlayerPosX < -5561.9634 && PlayerPosY < 3165.0007)
				{
				PlayerPlaySound(i, 5202, 0, 0, 0);
				}
			}
		}
		
		}
		}

		else if(AlienShipDamageLevel == 2)
		{
		if(AlienShipHealth <= 2500)
		{
		SendClientMessageToAll(-1,"{FFFFFF}The {FF0000}Alien Ship {FFFFFF}now has less than 2500hp!");
		AlienShipDamageLevel = 3;
		
		new Float:PlayerPosX;
		new Float:PlayerPosY;
		new Float:PlayerPosZ;
		for(new i=0;i<MAX_PLAYERS;i=i+1)
		{
			if(IsPlayerConnected(i))
			{
				GetPlayerPos(i, PlayerPosX, PlayerPosY, PlayerPosZ);

				if(PlayerPosX > -5835.2344 && PlayerPosY > 2936.5156 && PlayerPosX < -5561.9634 && PlayerPosY < 3165.0007)
				{
				PlayerPlaySound(i, 5202, 0, 0, 0);
				}
			}
		}
		
		}
		}

		else if(AlienShipDamageLevel == 3)
		{
		if(AlienShipHealth <= 0)
		{
		AlienShipDamageLevel = 4;
		AlienShipSequence = 3;
		
		SendClientMessageToAll(-1,"{FFFFFF}The {FF0000}Alien Ship {FFFFFF}has been heavily damanged!");
		SendClientMessageToAll(-1,"{80FF80}The {FF0000}Alien Ship {80FF80}is leaving, congratulations!");
		new Float:AlienShipPosXXX;
		new Float:AlienShipPosYYY;
		new Float:AlienShipPosZZZ;
		GetDynamicObjectPos(AlienShipObject1, AlienShipPosXXX, AlienShipPosYYY, AlienShipPosZZZ);
		CreateExplosion(AlienShipPosXXX, AlienShipPosYYY, AlienShipPosZZZ-20, 0, 20.0);
		CreateExplosion(AlienShipPosXXX+5, AlienShipPosYYY, AlienShipPosZZZ-20, 0, 20.0);
		CreateExplosion(AlienShipPosXXX, AlienShipPosYYY+5, AlienShipPosZZZ-20, 0, 20.0);
		CreateExplosion(AlienShipPosXXX-5, AlienShipPosYYY, AlienShipPosZZZ-20, 0, 20.0);
		CreateExplosion(AlienShipPosXXX, AlienShipPosYYY-5, AlienShipPosZZZ-20, 0, 20.0);
		MoveDynamicObject(AlienShipObject1, -5139.6035,3365.2644,2000.0000, 50, 0, 0, 90);
		MoveDynamicObject(AlienShipObject2, -5139.6035,3365.2644,2000.0000, 50, 0, 0, 180);
		MoveDynamicObject(AlienShipObject3, -5139.6035,3365.2644,2007.3600, 50, 0, 180, 90);
		MoveDynamicObject(AlienShipObject4, -5139.6035,3365.2644,2007.3600, 50, 0, 180, 180);
		
		
		
		new Float:PlayerPosX;
		new Float:PlayerPosY;
		new Float:PlayerPosZ;
		for(new i=0;i<MAX_PLAYERS;i=i+1)
		{
			if(IsPlayerConnected(i))
			{
				GetPlayerPos(i, PlayerPosX, PlayerPosY, PlayerPosZ);

				if(PlayerPosX > -5835.2344 && PlayerPosY > 2936.5156 && PlayerPosX < -5561.9634 && PlayerPosY < 3165.0007)
				{
				PlayerPlaySound(i, 5206, 0, 0, 0);
				}
			}
		}
		
		}
		}
		}
	

		}
	}

	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{

if(!strcmp(cmdtext, "/CARW", true))
{
new Float:x;
new Float:y;
new Float:z;
GetVehiclePos(0, x, y, z);
SetPlayerPos(playerid, x, y, z);
new VWTOP = GetVehicleVirtualWorld(0);
SetPlayerVirtualWorld(playerid, VWTOP);
new string[256];
format(string,sizeof(string),"VW: %d",GetPlayerVirtualWorld(playerid));
SendClientMessageToAll(0xFFFFFFAA,string);
new string2[256];
format(string2,sizeof(string2),"CARVW: %d",GetVehicleVirtualWorld(0));
SendClientMessageToAll(0xFFFFFFAA,string2);
PutPlayerInVehicle(playerid, 0,0);
return 1;
}


if(!strcmp(cmdtext, "/vw", true))
{

new string[256];
format(string,sizeof(string),"VW: %d",GetPlayerVirtualWorld(playerid));
SendClientMessageToAll(0xFFFFFFAA,string);
return 1;
}

if(!strcmp(cmdtext, "/hp", true))
{
SetPlayerHealth(playerid, 100000);
return 1;
}

if(!strcmp(cmdtext, "/m4", true))
{
GivePlayerWeapon(playerid, 31, 5000);
return 1;
}

if(!strcmp(cmdtext, "/minigun", true))
{
GivePlayerWeapon(playerid, 38, 5000);
return 1;
}

if(!strcmp(cmdtext, "/jetpack", true))
{
SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
return 1;
}

if(!strcmp(cmdtext, "/killai", true))
{
AlienShipAttackEnd();
SendClientMessageToAll(-1, "{FF8040}The Alien attack has been terminated by an admin.");
return 1;
}

if(!strcmp(cmdtext, "/ai", true))
{

AlienShipAttackEndTimer = SetTimer("AlienShipAttackEnd", 300000, false);

AlienShipObject1 = CreateDynamicObject(10955, -5139.6035,3365.2644,2000.0000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
AlienShipObject2 = CreateDynamicObject(10955, -5139.6035,3365.2644,2000.0000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 1500, 1500);
AlienShipObject3 = CreateDynamicObject(10955, -5139.6035,3365.2644,2007.3600,   0.00000, 180.00000, 0.00000, -1, -1, -1, 1500, 1500);
AlienShipObject4 = CreateDynamicObject(10955, -5139.6035,3365.2644,2007.3600,   0.00000, 180.00000, 90.00000, -1, -1, -1, 1500, 1500);

SetDynamicObjectMaterial(AlienShipObject1, 0, 13701, "lahillshilhs1c", "mirrwind4_LAn", 0xFF00FF00);
SetDynamicObjectMaterial(AlienShipObject2, 0, 13701, "lahillshilhs1c", "mirrwind4_LAn", 0xFF00FF00);
SetDynamicObjectMaterial(AlienShipObject3, 0, 13701, "lahillshilhs1c", "mirrwind4_LAn", 0xFF00FF00);
SetDynamicObjectMaterial(AlienShipObject4, 0, 13701, "lahillshilhs1c", "mirrwind4_LAn", 0xFF00FF00);
/*
SetDynamicObjectMaterial(AlienShipObject1, 1, 1676, "wshxrefpump", "metalic128", 0);
SetDynamicObjectMaterial(AlienShipObject2, 1, 1676, "wshxrefpump", "metalic128", 0);
SetDynamicObjectMaterial(AlienShipObject3, 1, 1676, "wshxrefpump", "metalic128", 0);
SetDynamicObjectMaterial(AlienShipObject4, 1, 1676, "wshxrefpump", "metalic128", 0);
*/
/*
CreateDynamicObject(10955, -15000.00000, 1400.00000, 5.00000,   15.00000, 180.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(10955, -14999.92969, 1401.82617, -2.09699,   0.00000, -15.00000, 90.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(10955, -14999.80664, 1401.81165, -2.09599,   15.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
CreateDynamicObject(10955, -15000.00000, 1400.00000, 5.00000,   0.00000, 165.00000, 90.00000, -1, -1, -1, 1500, 1500)
*/
/*
MoveDynamicObject(AlienShipObject1, -5139.6035,3365.2644,80.0000, 200, 0, 0, 180);
MoveDynamicObject(AlienShipObject2, -5139.6035,3365.2644,80.0000, 200, 0, 0, -90);
MoveDynamicObject(AlienShipObject3, -5139.6035,3365.2644,87.3600, 200, 0, 180, 180);
MoveDynamicObject(AlienShipObject4, -5139.6035,3365.2644,87.3600, 200, 0, 180, -90);
*/
MoveDynamicObject(AlienShipObject1, -5139.6035,3365.2644,80.0000, 200, 0, 0, 90);
MoveDynamicObject(AlienShipObject2, -5139.6035,3365.2644,80.0000, 200, 0, 0, 180);
MoveDynamicObject(AlienShipObject3, -5139.6035,3365.2644,87.3600, 200, 0, 180, 90);
MoveDynamicObject(AlienShipObject4, -5139.6035,3365.2644,87.3600, 200, 0, 180, 180);


return 1;
}

if(!strcmp(cmdtext, "/ch", true))
{
SetPlayerPos(playerid, -14654.8926,449.1843,4.9900);
return 1;
}


if(!strcmp(cmdtext, "/port", true))
{
SetPlayerPos(playerid, -5683.4443,3051.8235,5.0031);
return 1;
}

if(!strcmp(cmdtext, "/is", true))
{
SetPlayerPos(playerid, -11494.0420,2175.6843,4.9900);
return 1;
}

if(!strcmp(cmdtext, "/dead", true))
{
SetPlayerPos(playerid, -15874.6914,2750.3350,6.9719);
return 1;
}

if(!strcmp(cmdtext, "/fship", true))
{
SetPlayerPos(playerid, -8485.3896,3093.8821,3.4903);
return 1;
}

if(!strcmp(cmdtext, "/mud", true))
{
SetPlayerPos(playerid, -13041.9229,475.8085,4.9965);
return 1;
}

if(!strcmp(cmdtext, "/prologue", true))
{
//ShowPlayerDialog(playerid, DIALOG_WELCOME, DIALOG_STYLE_MSGBOX, "Prologue", "TEXT", "Close", "");
SendClientMessage(playerid, 0x408080FF, "It is the year 1995, A terrorist attack carried out by a group called 'New Dawn' on the main nuclear plant in Las Venturas");
SendClientMessage(playerid, 0x408080FF, "bestowed chaos and uncertainty upon San Andreas as a whole.");
SendClientMessage(playerid, 0x408080FF, "The whole country is now submerged under the biggest cloud of radiation since Chernobyl and has");
SendClientMessage(playerid, 0x408080FF, "now become unhospitable, for merely venturing within the now deserted streets of San Andreas is equal to charging head-on into a certain death.");
SendClientMessage(playerid, 0x408080FF, "The president of the United States and the few survivors who managed to endure and strive the nuclear holocaust have");
SendClientMessage(playerid, 0x408080FF, "been evacuated to an unknown man-made archipelago controlled by the army: the Islands of Eagleland, which remained");
SendClientMessage(playerid, 0x408080FF, "virtually untouched by the incident. However, the dim radiation contaminating the air and the waters ");
SendClientMessage(playerid, 0x408080FF, "of the Eagleland archipelago has taken its toll upon fauna and mankind alike: mutated creatures -- maybe animals and even people -- have been");
SendClientMessage(playerid, 0x408080FF, "sighted inland, and they're mostly aggressive and dangerous. The government is already taking action against these anomalies in order");
SendClientMessage(playerid, 0x408080FF, "to restore what little peace is left for the inhabitants of the archipelago.");



return 1;
}


if(!strcmp(cmdtext, "/skin", true))
{
SetPlayerSkin(playerid, 20003);
return 1;
}

if(!strcmp(cmdtext, "/skin2", true))
{
SetPlayerSkin(playerid, 20004);
return 1;
}

if(!strcmp(cmdtext, "/skin3", true))
{
SetPlayerSkin(playerid, 20005);
return 1;
}

if(!strcmp(cmdtext, "/skin4", true))
{
SetPlayerSkin(playerid, 20006);
return 1;
}

if(!strcmp(cmdtext, "/skin5", true))
{
SetPlayerSkin(playerid, 20007);
return 1;
}

if(!strcmp(cmdtext, "/skin6", true))
{
SetPlayerSkin(playerid, 20008);
return 1;
}

if(!strcmp(cmdtext, "/skin7", true))
{
SetPlayerSkin(playerid, 20009);
return 1;
}

if(!strcmp(cmdtext, "/skin8", true))
{
SetPlayerSkin(playerid, 20010);
return 1;
}

if(!strcmp(cmdtext, "/skin9", true))
{
SetPlayerSkin(playerid, 20011);
return 1;
}

if(!strcmp(cmdtext, "/skin10", true))
{
SetPlayerSkin(playerid, 20012);
return 1;
}

if(!strcmp(cmdtext, "/skin11", true))
{
SetPlayerSkin(playerid, 20013);
return 1;
}

if(!strcmp(cmdtext, "/skin12", true))
{
SetPlayerSkin(playerid, 20014);
return 1;
}


if(!strcmp(cmdtext, "/skin13", true))
{
SetPlayerSkin(playerid, 20001);
return 1;
}


if(!strcmp(cmdtext, "/skin14", true))
{
SetPlayerSkin(playerid, 20002);
return 1;
}

if(!strcmp(cmdtext, "/skin15", true))
{
SetPlayerSkin(playerid, 20015);
return 1;
}

if(!strcmp(cmdtext, "/skin16", true))
{
SetPlayerSkin(playerid, 20016);
return 1;
}

if(!strcmp(cmdtext, "/skin17", true))
{
SetPlayerSkin(playerid, 20017);
return 1;
}

if(!strcmp(cmdtext, "/skin18", true))
{
SetPlayerSkin(playerid, 20018);
return 1;
}

if(!strcmp(cmdtext, "/skin19", true))
{
SetPlayerSkin(playerid, 20019);
return 1;
}

if(!strcmp(cmdtext, "/skin20", true))
{
SetPlayerSkin(playerid, 20020);
return 1;
}

if(!strcmp(cmdtext, "/skin21", true))
{
SetPlayerSkin(playerid, 20021);
return 1;
}

if(!strcmp(cmdtext, "/skin22", true))
{
SetPlayerSkin(playerid, 20022);
return 1;
}

if(!strcmp(cmdtext, "/skin23", true))
{
SetPlayerSkin(playerid, 20023);
return 1;
}

if(!strcmp(cmdtext, "/skin24", true))
{
SetPlayerSkin(playerid, 20024);
return 1;
}

if(!strcmp(cmdtext, "/skin25", true))
{
SetPlayerSkin(playerid, 20025);
return 1;
}

if(!strcmp(cmdtext, "/skin26", true))
{
SetPlayerSkin(playerid, 20026);
return 1;
}

if(!strcmp(cmdtext, "/0", true))
{
SetPlayerVirtualWorld(playerid, 0);
return 1;
}

if(!strcmp(cmdtext, "/kill", true))
{
SetPlayerHealth(playerid, 0);
return 1;
}

if(!strcmp(cmdtext, "/in", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(411, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}

if(!strcmp(cmdtext, "/mav", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(487, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}

if(!strcmp(cmdtext, "/hy", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(520, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}

if(!strcmp(cmdtext, "/sa", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(495, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}

if(!strcmp(cmdtext, "/dodo", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(593, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}

if(!strcmp(cmdtext, "/hu", true))
{
new car;
new Float:X, Float:Y, Float:Z;
GetPlayerPos(playerid, Float:X, Float:Y, Float:Z);

car = CreateVehicle(579, X, Y, Z, 0, -1, -1, -1);
PutPlayerInVehicle(playerid, car, 0);
return 1;
}


if(!strcmp(cmdtext, "/team", true))
{

new string[256];
format(string,sizeof(string),"Team: %d",GetPlayerTeam(playerid));
SendClientMessageToAll(0xFFFFFFAA,string);
return 1;
}

if(!strcmp(cmdtext, "/skipw", true))
{
KillTimer(WeatherTimer);
WeatherTimer = SetTimer("ChangeGlobalWeatherAndTime", 960000, true); //17 MINS, -25%?
ChangeGlobalWeatherAndTime();
return 1;
}




return 0;
}


public OnPlayerConnect(playerid)
{

PlayerPlaySound(playerid, 141, 0.0, 0.0, 0.0);

SetPlayerPos(playerid, -8300.0000, 1740.0000, 4.4962);//AVOIDING RADIATIONS EXPOSURE DAMAGE FROM SA

PlayerWentThroughClassSelection[playerid] = 0;

PlayerIsInSanAndreas[playerid] = 0;

PlayerMonsterType[playerid] = -1;
PlayerMilitaryType[playerid] = -1;
PlayerIsCivilian[playerid] = 0;


SendClientMessage(playerid, -1, "{FFFFFF}Welcome to {FF0000}Indonesian World, {FFFFFF}this server is set in a {FF0000}post-apocalyptic world.");
SendClientMessage(playerid, -1, "{FFFFFF}Use {FF0000}/prologue {FFFFFF}for more information.");
SendClientMessage(playerid, -1, "{FF8040}This server is still on BETA testing, please contact admins if you find any bugs.");
SendClientMessage(playerid, -1, "{FFFFFF}/ch /dead /fship /is /port /mud.");
SendClientMessage(playerid, -1, "{FFFFFF}/sa /hy /mav /hu /dodo /skin[+N].");

//SHOWING GANGZONES
GangZoneShowForAll(PortTownZone,0x80FF80FF);

//SHOWING PICKUPS
SetPlayerMapIcon(playerid, 0, -7181.9497,1394.5232,5.0500, 57, 0, MAPICON_GLOBAL);//ISLAND 1 ARMY BASE
SetPlayerMapIcon(playerid, 1, -7653.8945,1893.6510,5.0882, 49, 0, MAPICON_GLOBAL);//ISLAND 1 REDNKECK VILLAGE
SetPlayerMapIcon(playerid, 2, -7688.9341,2800.4570,4.9900, 55, 0, MAPICON_GLOBAL);//ISLAND 1 PETROL STATION
SetPlayerMapIcon(playerid, 3, -7681.4956,3326.4500,5.1117, 11, 0, MAPICON_GLOBAL);//ISLAND 1 FARM
SetPlayerMapIcon(playerid, 4, -5681.8809,3050.5305,5.0000, 48, 0, MAPICON_GLOBAL);//ISLAND 1 CITY
SetPlayerMapIcon(playerid, 5, -9510.2158,719.9827,4.9900, 17, 0, MAPICON_GLOBAL);//AREA 2 FUNFAIR
SetPlayerMapIcon(playerid, 6, -9076.8574,2814.4839,4.9900, 11, 0, MAPICON_GLOBAL);//AREA 2 SAWMILL
SetPlayerMapIcon(playerid, 7, -10531.2871,3246.4810,4.9900, 40, 0, MAPICON_GLOBAL);//AREA 2 INDIAN VILLAGE
SetPlayerMapIcon(playerid, 8, -10656.4473,961.5505,4.9800, 48, 0, MAPICON_GLOBAL);//AREA 2 TOWN
SetPlayerMapIcon(playerid, 9, -12862.2295,677.4573,5.3235, 48, 0, MAPICON_GLOBAL);//AREA 3 CITY
SetPlayerMapIcon(playerid, 10, -12936.2637,3045.4365,4.9900, 16, 0, MAPICON_GLOBAL);//AREA 3 CARTEL TOWN
SetPlayerMapIcon(playerid, 11, -8958.4248,1675.2749,5.4709, 48, 0, MAPICON_GLOBAL);//AREA 2 REDNECK TOWN
SetPlayerMapIcon(playerid, 12, -5718.0190,1157.0334,5.0002, 50, 0, MAPICON_GLOBAL);//AREA 1 RESTAURANT MOTEL
SetPlayerMapIcon(playerid, 13, -15868.3350,2750.3140,6.9731, 23, 0, MAPICON_GLOBAL);//AREA 4 NECROPOLIS
SetPlayerMapIcon(playerid, 14, -13442.6201, 1760.2662, 20.6265, 61, 0, MAPICON_GLOBAL);//AREA 3 MILITARY BASE
SetPlayerMapIcon(playerid, 15, -7542.3154, 650.8510, 3.9846, 51, 0, MAPICON_GLOBAL);//AREA 1 FACTORY
SetPlayerMapIcon(playerid, 16, -6698.8628, 553.1697, 64.1786, 38, 0, MAPICON_GLOBAL);//AREA 1 VOLCANO SCIENTISTS
SetPlayerMapIcon(playerid, 17, -6567.2954, -224.8491, 3.9818, 48, 0, MAPICON_GLOBAL);//AREA 1 SOUTH VILLAGE
SetPlayerMapIcon(playerid, 18, -5595.9390, 76.0109, 3.9800, 48, 0, MAPICON_GLOBAL);//AREA 1 WALLED VILLAGE
SetPlayerMapIcon(playerid, 19, -12453.9473,2134.8430,4.9900, 48, 0, MAPICON_GLOBAL);//AREA 3 LAKE VILLAGE
SetPlayerMapIcon(playerid, 20, -7319.3838, -88.2457, 3.9637, 51, 0, MAPICON_GLOBAL);//AREA 1 WASTELAND
SetPlayerMapIcon(playerid, 21, -14837.2666,253.7057,4.9900, 36, 0, MAPICON_GLOBAL);//AREA 4 DESTROYED MILITARY BASE
SetPlayerMapIcon(playerid, 22, -15998.2275,642.8104,4.9900, 23, 0, MAPICON_GLOBAL);//AREA 4 PYRAMID
SetPlayerMapIcon(playerid, 23, -15111.0439,844.3557,376.5335, 11, 0, MAPICON_GLOBAL);//AREA 4 CHILIAD MOUNTAIN
SetPlayerMapIcon(playerid, 24, -5660.3345,3311.1514,5.2284, 9, 0, MAPICON_GLOBAL);//AREA 1 PORT TOWN DOCK
SetPlayerMapIcon(playerid, 25, -5585.1680,3081.3728,5.0000, 6, 0, MAPICON_GLOBAL);//AREA 1 PORT TOWN AMMUNATION

return 1;
}


public OnPlayerDisconnect(playerid, reason)
{

return 1;
}


public OnPlayerRequestClass(playerid, classid)
{

//SetPlayerVirtualWorld(playerid, 0);
//SetPlayerInterior(playerid, 0);
PlayerPlaySound(playerid, 141, 0.0, 0.0, 0.0);


PlayerWentThroughClassSelection[playerid] = 1;

PlayerMonsterType[playerid] = -1;
PlayerMilitaryType[playerid] = -1;
PlayerIsCivilian[playerid] = 0;

Streamer_UpdateEx(playerid, -8300.0000, 1740.0000, 4.4962);

PlayerTextDrawHide(playerid, CivilianLevelTD[playerid]);
PlayerTextDrawHide(playerid, CivilianExpTD[playerid]);

PlayerTextDrawHide(playerid, MilitaryLevelTD[playerid]);
PlayerTextDrawHide(playerid, MilitaryExpTD[playerid]);

PlayerTextDrawHide(playerid, MonsterLevelTD[playerid]);
PlayerTextDrawHide(playerid, MonsterExpTD[playerid]);

PlayerTextDrawHide(playerid, DashTD[playerid]);
PlayerTextDrawHide(playerid, BiteTD[playerid]);




SetPlayerColor(playerid, 0xC0C0C0FF);

SetPlayerTime(playerid, 20, 0);
SetPlayerWeather(playerid, 18);

if(classid == 0)
{
GameTextForPlayer(playerid, "~g~CIVILIAN", 2000, 6);
SetPlayerPos(playerid, -8300.0000, 1740.0000, 4.4962);
SetPlayerCameraPos(playerid, -8290.0000, 1740.0000, 5.0000);
SetPlayerFacingAngle(playerid, -90);
SetPlayerCameraLookAt(playerid, -8300.0000, 1740.0000, 4.4962);
SetPlayerTeam(playerid, NO_TEAM);
PlayerIsCivilian[playerid] = 1;

ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);

}

if(classid == 1)
{
GameTextForPlayer(playerid, "~b~MILITARY", 2000, 6);
SetPlayerPos(playerid, -8290.0000, 1730.0000, 4.4962);
SetPlayerCameraPos(playerid, -8290.0000, 1740.0000, 5.0000);
SetPlayerFacingAngle(playerid, 0);
SetPlayerCameraLookAt(playerid, -8290.0000, 1730.0000, 4.4962);
SetPlayerTeam(playerid, 0);
PlayerMilitaryType[playerid] = -1;

ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);

}

if(classid == 2)
{
GameTextForPlayer(playerid, "~r~MONSTER", 2000, 6);
SetPlayerPos(playerid, -8290.0000, 1750.0000, 4.4962);
SetPlayerCameraPos(playerid, -8290.0000, 1740.0000, 5.0000);
SetPlayerFacingAngle(playerid, 180);
SetPlayerCameraLookAt(playerid, -8290.0000, 1750.0000, 4.4962);
SetPlayerTeam(playerid, 1);
PlayerMonsterType[playerid] = -1;

ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);
ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1, 0);

}



return 1;
}


public OnPlayerSpawn(playerid)
{

PlayerPlaySound(playerid,138, 0, 0, 0);


PlayerTextDrawHide(playerid, CivilianLevelTD[playerid]);
PlayerTextDrawHide(playerid, CivilianExpTD[playerid]);

PlayerTextDrawHide(playerid, MilitaryLevelTD[playerid]);
PlayerTextDrawHide(playerid, MilitaryExpTD[playerid]);

PlayerTextDrawHide(playerid, MonsterLevelTD[playerid]);
PlayerTextDrawHide(playerid, MonsterExpTD[playerid]);

if(GetPlayerTeam(playerid) == NO_TEAM)//TEXTDRAWS
{
PlayerIsCivilian[playerid] = 1;
SetPlayerVirtualWorld(playerid, 0);


//255 FULL/ LUM 120
//144
//168
//192
//216


if(PlayerCivilianLevel[playerid] < 20)
{
SetPlayerColor(playerid, 0xCCFFCCFF);
}

else if(PlayerCivilianLevel[playerid] < 40)
{
SetPlayerColor(playerid, 0x99FF99FF);
}

else if(PlayerCivilianLevel[playerid] < 60)
{
SetPlayerColor(playerid, 0x66FF66FF);
}

else if(PlayerCivilianLevel[playerid] < 80)
{
SetPlayerColor(playerid, 0x33FF33FF);
}

else if(PlayerCivilianLevel[playerid] < 100)
{
SetPlayerColor(playerid, 0x00FF00FF);
}

CivilianLevelTD[playerid] = CreatePlayerTextDraw(playerid, 10.000000, 430.000000, "Civilian Level:");
PlayerTextDrawBackgroundColor(playerid ,CivilianLevelTD[playerid], 255);
PlayerTextDrawFont(playerid ,CivilianLevelTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,CivilianLevelTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,CivilianLevelTD[playerid], 0x80FF80FF);
PlayerTextDrawSetOutline(playerid ,CivilianLevelTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,CivilianLevelTD[playerid], 1);

CivilianExpTD[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 430.000000, "EXP:");
PlayerTextDrawBackgroundColor(playerid ,CivilianExpTD[playerid], -1);
PlayerTextDrawFont(playerid ,CivilianExpTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,CivilianExpTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,CivilianExpTD[playerid], 0x80FF80FF);
PlayerTextDrawSetOutline(playerid ,CivilianExpTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,CivilianExpTD[playerid], 1);

PlayerTextDrawShow(playerid, CivilianLevelTD[playerid]);
PlayerTextDrawShow(playerid, CivilianExpTD[playerid]);
}

if(GetPlayerTeam(playerid) == 0)//TEXTDRAWS
{
SetPlayerVirtualWorld(playerid, 0);

if(PlayerMilitaryLevel[playerid] < 20)
{
SetPlayerColor(playerid, 0xCCCCFFFF);
}

else if(PlayerMilitaryLevel[playerid] < 40)
{
SetPlayerColor(playerid, 0x9999FFFF);
}

else if(PlayerMilitaryLevel[playerid] < 60)
{
SetPlayerColor(playerid, 0x6666FFFF);
}

else if(PlayerMilitaryLevel[playerid] < 80)
{
SetPlayerColor(playerid, 0x3333FFFF);
}

else if(PlayerMilitaryLevel[playerid] < 100)
{
SetPlayerColor(playerid, 0x0000FFFF);
}


MilitaryLevelTD[playerid] = CreatePlayerTextDraw(playerid, 10.000000, 430.000000, "Military Level:");
PlayerTextDrawBackgroundColor(playerid ,MilitaryLevelTD[playerid], 255);
PlayerTextDrawFont(playerid ,MilitaryLevelTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,MilitaryLevelTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,MilitaryLevelTD[playerid], 0x0080FFFF);
PlayerTextDrawSetOutline(playerid ,MilitaryLevelTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,MilitaryLevelTD[playerid], 1);

MilitaryExpTD[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 430.000000, "EXP:");
PlayerTextDrawBackgroundColor(playerid ,MilitaryExpTD[playerid], -1);
PlayerTextDrawFont(playerid ,MilitaryExpTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,MilitaryExpTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,MilitaryExpTD[playerid], 0x0080FFFF);
PlayerTextDrawSetOutline(playerid ,MilitaryExpTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,MilitaryExpTD[playerid], 1);

PlayerTextDrawShow(playerid, MilitaryLevelTD[playerid]);
PlayerTextDrawShow(playerid, MilitaryExpTD[playerid]);

}

if(GetPlayerTeam(playerid) == 1)//TEXTDRAWS
{
SetPlayerVirtualWorld(playerid, 0);


if(PlayerMonsterLevel[playerid] < 20)
{
SetPlayerColor(playerid, 0xFFCCCCFF);
}

else if(PlayerMonsterLevel[playerid] < 40)
{
SetPlayerColor(playerid, 0xFF9999FF);
}

else if(PlayerMonsterLevel[playerid] < 60)
{
SetPlayerColor(playerid, 0xFF6666FF);
}

else if(PlayerMonsterLevel[playerid] < 80)
{
SetPlayerColor(playerid, 0xFF3333FF);
}

else if(PlayerMonsterLevel[playerid] < 100)
{
SetPlayerColor(playerid, 0xFF0000FF);
}

MonsterLevelTD[playerid] = CreatePlayerTextDraw(playerid, 10.000000, 430.000000, "Monster Level:");
PlayerTextDrawBackgroundColor(playerid ,MonsterLevelTD[playerid], 255);
PlayerTextDrawFont(playerid ,MonsterLevelTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,MonsterLevelTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,MonsterLevelTD[playerid], 0xFF8080FF);
PlayerTextDrawSetOutline(playerid ,MonsterLevelTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,MonsterLevelTD[playerid], 1);

MonsterExpTD[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 430.000000, "EXP:");
PlayerTextDrawBackgroundColor(playerid ,MonsterExpTD[playerid], -1);
PlayerTextDrawFont(playerid ,MonsterExpTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,MonsterExpTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,MonsterExpTD[playerid], 0xFF8080FF);
PlayerTextDrawSetOutline(playerid ,MonsterExpTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,MonsterExpTD[playerid], 1);

PlayerTextDrawShow(playerid, MonsterLevelTD[playerid]);
PlayerTextDrawShow(playerid, MonsterExpTD[playerid]);

}


PlayerPlaySound(playerid,138, 0, 0, 0);
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);

if(GetPlayerTeam(playerid) == 0)//DIED ON MILITARY SELECTION
{
if(PlayerWentThroughClassSelection[playerid] == 1 && PlayerMilitaryType[playerid] == -1)
{
SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 273.3797, 179.9692, 1012.0685);
SetPlayerSkin(playerid, 71);
}
}

if(GetPlayerTeam(playerid) == 1)//DIED ON MONSTER SELECTION
{
if(PlayerWentThroughClassSelection[playerid] == 1 && PlayerMonsterType[playerid] == -1)
{
SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 346.8397, 303.7401, 1003.6976);
SetPlayerSkin(playerid, 20014);
}
}


if(PlayerWentThroughClassSelection[playerid] == 1)//CAME FROM CLASS SELECTION
{

if(GetPlayerTeam(playerid) == NO_TEAM)
{

if(PlayerIsCivilian[playerid] == 1)
{

SendClientMessage(playerid, -1, "{FFFFFF}You have selected the {00FF00}civilian {FFFFFF}faction!");
//SendClientMessage(playerid, -1, "{FFFFFF}Your duty is to do {80FF00}quests{FFFFFF} and survive the {E60000}monsters.");
SendClientMessage(playerid, -1, "{FFFFFF}Please select your skin.");

new RandomSpawn = random(sizeof(RandomCivilianSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomCivilianSpawn[RandomSpawn][0], RandomCivilianSpawn[RandomSpawn][1],RandomCivilianSpawn[RandomSpawn][2], RandomCivilianSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
}

}

if(GetPlayerTeam(playerid) == 0)//CAME FROM CLASS SELECTION HASNT SELECTED A MILITARY TYPE YET
{

if(PlayerMilitaryType[playerid] == -1)
{

SendClientMessage(playerid, -1, "{FFFFFF}You have selected the {0000FF}Military {FFFFFF}faction!");
SendClientMessage(playerid, -1, "{FFFFFF}Your duty is to protect {00E600}civilians {FFFFFF}and hunt down {E60000}monsters.");
SendClientMessage(playerid, -1, "{FFFFFF}Please select your officer.");

SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 273.3797, 179.9692, 1012.0685);
SetPlayerSkin(playerid, 71);
}



}

if(GetPlayerTeam(playerid) == 1)//CAME FROM CLASS SELECTION HASNT SELECTED A MONSTER TYPE YET
{

if(PlayerMonsterType[playerid] == -1)
{
SendClientMessage(playerid, -1, "{FFFFFF}You have selected the {FF0000}monster {FFFFFF}faction!");
SendClientMessage(playerid, -1, "{FFFFFF}Your duty is to kill as many {00E600}civilians{FFFFFF} and {0000E6}Military officers {FFFFFF}as possible.");
SendClientMessage(playerid, -1, "{FFFFFF}Please select your creature.");

SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 346.8397, 303.7401, 1003.6976);
SetPlayerSkin(playerid, 20014);
}



}


PlayerWentThroughClassSelection[playerid] = 0;
}

//NORMAL
else if(PlayerWentThroughClassSelection[playerid] == 0)//NOT COMING FROM CLASS SELECTION
{

if(GetPlayerTeam(playerid) == NO_TEAM)
{

if(PlayerIsCivilian[playerid] == 1)
{
new RandomSpawn = random(sizeof(RandomCivilianSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomCivilianSpawn[RandomSpawn][0], RandomCivilianSpawn[RandomSpawn][1],RandomCivilianSpawn[RandomSpawn][2], RandomCivilianSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);



}

}

if(GetPlayerTeam(playerid) == 0)
{

if(PlayerMilitaryType[playerid] == -1)
{
SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 273.3797, 179.9692, 1012.0685);
SetPlayerSkin(playerid, 71);
}


if(PlayerMilitaryType[playerid] == 1)
{
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 23, 100);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 71);
}

if(PlayerMilitaryType[playerid] == 2)
{
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 280);
}

if(PlayerMilitaryType[playerid] == 3)
{
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 285);
}

if(PlayerMilitaryType[playerid] == 4)
{
SetPlayerPosWithWorldLoadDelay(playerid, -7189.8384,1304.9359,4.9900,268.5586, false);
GivePlayerWeapon(playerid, 31, 200);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 287);
}

if(PlayerMilitaryType[playerid] == 5)
{
SetPlayerPosWithWorldLoadDelay(playerid, -7189.8384,1304.9359,4.9900,268.5586, false);
GivePlayerWeapon(playerid, 31, 200);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
GivePlayerWeapon(playerid, 34, 10);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20003);
}



}

if(GetPlayerTeam(playerid) == 1)
{

if(PlayerMonsterType[playerid] == -1)
{
SetPlayerInterior(playerid, 1);
SetPlayerPos(playerid, 346.8397, 303.7401, 1003.6976);
SetPlayerSkin(playerid, 20014);
}


if(PlayerMonsterType[playerid] == 1)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20008);
}

if(PlayerMonsterType[playerid] == 2)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20007);
}

if(PlayerMonsterType[playerid] == 3)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20014);
}

if(PlayerMonsterType[playerid] == 4)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20004);
}

if(PlayerMonsterType[playerid] == 5)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20012);
}

if(PlayerMonsterType[playerid] == 6)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20009);
}

if(PlayerMonsterType[playerid] == 7)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20010);
}

if(PlayerMonsterType[playerid] == 8)
{
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20013);
}


}




}





return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
SendDeathMessage(killerid, playerid, reason); 

return 1;
}




public ResetActorsPositions()
{

new Float:x, Float:y, Float:z;

for(new i=0; i<MAX_ACTORS; i=i+1)
{
if(IsValidActor(i))
{

GetActorPos(i, x, y, z);
//new string[256];
//format(string,sizeof(string),"APOS: %f, %f, %f",x, y, z);
//SendClientMessageToAll(0xFFFFFFAA,string);

SetActorPos(i, x, y, z);
//ClearActorAnimations(i);
}



}

}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{

//SetPlayerPosWithWorldLoadDelay(playerid, Float:x, Float:y, Float:z, Float:PlayerFacingAngle, bool:EnEx)


/*
TownMilitiaSelectCheckpoint = CreateDynamicCP(288.0000,159.0,1012.0699-1, 2, -1, -1, -1, 3.0);
PoliceSelectCheckpoint = CreateDynamicCP(288.0000,165.0,1012.0699-1, 2, -1, -1, -1, 3.0);
SwatSelectCheckpoint = CreateDynamicCP(288.0000,171.0,1012.0699-1, 2, -1, -1, -1, 3.0);
MilitarySelectCheckpoint = CreateDynamicCP(288.0000,177.0,1012.0699-1, 2, -1, -1, -1, 3.0);
DeltaForceSelectCheckpoint = CreateDynamicCP(288.0000,183.0,1012.0699-1, 2, -1, -1, -1, 3.0);
*/
if(checkpointid == TownMilitiaSelectCheckpoint)
{
if(PlayerMilitaryLevel[playerid] == 0)
{
PlayerMilitaryType[playerid] = 1;
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 23, 100);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 71);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {0040FF}Town Militia, {FFFFFF}use {0040FF}/ab {FFFFFF}to check out its {0040FF}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == PoliceSelectCheckpoint)
{
if(PlayerMilitaryLevel[playerid] == 0)
{
PlayerMilitaryType[playerid] = 2;
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 280);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {0040FF}Police officer, {FFFFFF}use {0040FF}/ab {FFFFFF}to check out its {0040FF}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == SwatSelectCheckpoint)
{
if(PlayerMilitaryLevel[playerid] == 0)
{
PlayerMilitaryType[playerid] = 3;
SetPlayerPosWithWorldLoadDelay(playerid, -5422.7734,2875.8152,4.9900, 180, false);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 285);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {0040FF}Swat, {FFFFFF}use {0040FF}/ab {FFFFFF}to check out its {0040FF}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == MilitarySelectCheckpoint)
{
if(PlayerMilitaryLevel[playerid] == 0)
{
PlayerMilitaryType[playerid] = 4;
SetPlayerPosWithWorldLoadDelay(playerid, -7189.8384,1304.9359,4.9900,268.5586, false);
GivePlayerWeapon(playerid, 31, 200);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 287);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {0040FF}Military, {FFFFFF}use {0040FF}/ab {FFFFFF}to check out its {0040FF}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == DeltaForceSelectCheckpoint)
{
if(PlayerMilitaryLevel[playerid] == 0)
{
PlayerMilitaryType[playerid] = 5;
SetPlayerPosWithWorldLoadDelay(playerid, -7189.8384,1304.9359,4.9900,268.5586, false);
GivePlayerWeapon(playerid, 31, 200);
GivePlayerWeapon(playerid, 29, 150);
GivePlayerWeapon(playerid, 24, 50);
GivePlayerWeapon(playerid, 34, 10);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20003);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {0040FF}Delta Force, {FFFFFF}use {0040FF}/ab {FFFFFF}to check out its {0040FF}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}





/*
WolfSelectCheckpoint = CreateDynamicCP(369.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
BearSelectCheckpoint = CreateDynamicCP(363.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
ZombieSelectCheckpoint = CreateDynamicCP(357.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
HumanMutantSelectCheckpoint = CreateDynamicCP(351.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
HumanLizardSelectCheckpoint = CreateDynamicCP(345.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
SkeletonSelectCheckpoint = CreateDynamicCP(339.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
BigfootSelectCheckpoint = CreateDynamicCP(333.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
AngelOfDeathSelectCheckpoint = CreateDynamicCP(327.0000,312.0,1003.7000-1, 2, -1, -1, -1, 3.0);
*/


if(checkpointid == WolfSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 1;
AllowDash[playerid] = true;
AllowBite[playerid] = true;
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20008);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Wolf, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);

DashTD[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 1.000000, "DASH");
PlayerTextDrawBackgroundColor(playerid ,DashTD[playerid], 255);
PlayerTextDrawFont(playerid ,DashTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,DashTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,DashTD[playerid], 0x00FF40FF);
PlayerTextDrawSetOutline(playerid ,DashTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,DashTD[playerid], 1);

BiteTD[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 10.000000, "BITE");
PlayerTextDrawBackgroundColor(playerid ,BiteTD[playerid], 255);
PlayerTextDrawFont(playerid ,BiteTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,BiteTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,BiteTD[playerid], 0x00FF40FF);
PlayerTextDrawSetOutline(playerid ,BiteTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,BiteTD[playerid], 1);

PlayerTextDrawShow(playerid, DashTD[playerid]);
PlayerTextDrawShow(playerid, BiteTD[playerid]);

}
}

if(checkpointid == BearSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 2;
AllowDash[playerid] = true;
AllowBite[playerid] = true;
new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20007);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Bear, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);

DashTD[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 1.000000, "DASH");
PlayerTextDrawBackgroundColor(playerid ,DashTD[playerid], 255);
PlayerTextDrawFont(playerid ,DashTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,DashTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,DashTD[playerid], 0x00FF40FF);
PlayerTextDrawSetOutline(playerid ,DashTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,DashTD[playerid], 1);

BiteTD[playerid] = CreatePlayerTextDraw(playerid, 433.000000, 10.000000, "BITE");
PlayerTextDrawBackgroundColor(playerid ,BiteTD[playerid], 255);
PlayerTextDrawFont(playerid ,BiteTD[playerid], 2);
PlayerTextDrawLetterSize(playerid ,BiteTD[playerid], 0.500000, 1.000000);
PlayerTextDrawColor(playerid ,BiteTD[playerid], 0x00FF40FF);
PlayerTextDrawSetOutline(playerid ,BiteTD[playerid], 1);
PlayerTextDrawSetProportional(playerid ,BiteTD[playerid], 1);

PlayerTextDrawShow(playerid, DashTD[playerid]);
PlayerTextDrawShow(playerid, BiteTD[playerid]);

}
}

if(checkpointid == ZombieSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 3;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20014);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Zombie, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == HumanMutantSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 4;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20004);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Human Mutant, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == HumanLizardSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 5;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20012);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Swampman, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == SkeletonSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 6;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20009);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Skeleton, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == BigfootSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 7;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20010);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Big foot, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}

if(checkpointid == AngelOfDeathSelectCheckpoint)
{
if(PlayerMonsterLevel[playerid] == 0)
{
PlayerMonsterType[playerid] = 8;

new RandomSpawn = random(sizeof(RandomMonstersSpawn));
SetPlayerPosWithWorldLoadDelay(playerid, RandomMonstersSpawn[RandomSpawn][0], RandomMonstersSpawn[RandomSpawn][1],RandomMonstersSpawn[RandomSpawn][2], RandomMonstersSpawn[RandomSpawn][3], false);
SetPlayerInterior(playerid, 0);
SetPlayerSkin(playerid, 20013);
SendClientMessage(playerid, -1, "{FFFFFF}You have chosen the {E60000}Angel of Death, {FFFFFF}use {E60000}/ab {FFFFFF}to check out its {E60000}abilities.");
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}
}



return 1;
}

public OnVehicleSpawn(vehicleid)
{
ChangeVehicleColor(vehicleid, random(255), random(255));
SetVehicleNumberPlate(vehicleid, "{FF0000}Indonesian");
return 1;
}

public SetPlayerPosWithWorldLoadDelay(playerid, Float:x, Float:y, Float:z, Float:PlayerFacingAngle, bool:EnEx)
{

SetPlayerVirtualWorld(playerid, 1);
TogglePlayerControllable(playerid, 0);
SetPlayerFacingAngle(playerid, PlayerFacingAngle);



if(EnEx == false)
{
SetPlayerPos(playerid, x, y, z);
}

if(EnEx == true)
{

new const Float:DISTANCE = 3.0;

PlayerFacingAngle = PlayerFacingAngle-180.0;
new Float:F_FLOATSIN = floatsin(-PlayerFacingAngle, degrees);
new Float:F_FLOATCOS = floatcos(-PlayerFacingAngle, degrees);

F_FLOATSIN = -F_FLOATSIN;
F_FLOATCOS = -F_FLOATCOS;

SetPlayerPos(playerid, x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z);


}

new PlayerLoadWorldDelay = GetPlayerPing(playerid)*10;


if(PlayerLoadWorldDelay > 1000)//Lag spike fix
{

PlayerLoadWorldDelay = 1000*10;

}

if(PlayerLoadWorldDelay < 100)//Low ping fix
{

PlayerLoadWorldDelay = 3000;

}




SetTimerEx("LoadWorldForPlayer", PlayerLoadWorldDelay, false, "i", playerid);
GameTextForPlayer(playerid, "~b~~h~PLEASE WAIT", PlayerLoadWorldDelay, 3);



}

public LoadWorldForPlayer(playerid)
{
SetPlayerVirtualWorld(playerid, 0);
TogglePlayerControllable(playerid, 1);

if(GetPlayerInterior(playerid) == 0)
{
SetPlayerWeather(playerid, ServerGlobalWeather);
SetPlayerTime(playerid, ServerGlobalTime, 0);
}


}

public AutomaticMessages()
{
if(AutoMsg == 1)
{
SendClientMessageToAll(-1, "{63C094}[INFO]: {FFFFFF}Use {63C094}/ab{FFFFFF} to check the abilites of your character.");
AutoMsg = AutoMsg+1;
}
else if(AutoMsg == 2)
{
SendClientMessageToAll(-1, "{63C094}[INFO]: {FFFFFF}Noticed any misplaced object? Please contact the admin about it.");
AutoMsg = AutoMsg+1;
}

else if(AutoMsg == 3)
{
SendClientMessageToAll(-1, "{63C094}[INFO]: {FFFFFF}This server uses alot of video memory, if you're experiencing low fps, lower your video settings.");
AutoMsg = AutoMsg+1;
}

else if(AutoMsg == 4)
{
SendClientMessageToAll(-1, "{63C094}[INFO]: {FFFFFF}Use {63C094}/rules {FFFFFF}to check the rules of the server.");
AutoMsg = AutoMsg+1;
}

else if(AutoMsg == 5)
{
SendClientMessageToAll(-1, "{63C094}[INFO]: {FFFFFF}Got any suggestion or complaint? Tell them to an admin.");
AutoMsg = 1;
}



}

public ChangeGlobalWeatherAndTime()
{

if(WeatherOrder == 0)
{
//SendClientMessageToAll(-1,"yes");
for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 8);
SetPlayerTime(i, 12, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Rainy.");
ServerGlobalWeather = 8;
ServerGlobalTime = 12;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 1)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 9);
SetPlayerTime(i, 20, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Foggy.");
ServerGlobalWeather = 9;
ServerGlobalTime = 20;
WeatherOrder = WeatherOrder+1;
}


else if(WeatherOrder == 2)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 12);
SetPlayerTime(i, 12, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Cloudy.");
ServerGlobalWeather = 12;
ServerGlobalTime = 12;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 3)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 16);
SetPlayerTime(i, 0, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Thunderstorm.");
ServerGlobalWeather = 16;
ServerGlobalTime = 0;
WeatherOrder = WeatherOrder+1;
}



else if(WeatherOrder == 4)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 17);
SetPlayerTime(i, 0, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Heat wave.");
ServerGlobalWeather = 17;
ServerGlobalTime = 0;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 5)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 20);
SetPlayerTime(i, 12, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Misty.");
ServerGlobalWeather = 20;
ServerGlobalTime = 12;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 6)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 18);
SetPlayerTime(i, 21, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Heat wave.");
ServerGlobalWeather = 18;
ServerGlobalTime = 21;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 7)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 23);
SetPlayerTime(i, 20, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Sandstorm.");
ServerGlobalWeather = 23;
ServerGlobalTime = 20;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 8)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 24);
SetPlayerTime(i, 4, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Sunny.");
ServerGlobalWeather = 24;
ServerGlobalTime = 4;
WeatherOrder = WeatherOrder+1;
}

else if(WeatherOrder == 9)
{

for(new i=0; i<MAX_PLAYERS; i=i+1)
{
if(IsPlayerConnected(i))
{
if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
SetPlayerWeather(i, 30);
SetPlayerTime(i, 21, 0);

}
}
}
SendClientMessageToAll(-1, "{8080C0}Weather forecast: {FFFFFF}Nuclear fallout.");
ServerGlobalWeather = 30;
ServerGlobalTime = 21;
WeatherOrder = 0;
}





}



	
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
if(newkeys & KEY_JUMP)
{
if(PlayerMonsterType[playerid] == 1 || PlayerMonsterType[playerid] == 2)
{
if(GetPlayerTeam(playerid) == 1)
{
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
{
new Float:PlayerFacingAngle;
GetPlayerFacingAngle(playerid, PlayerFacingAngle);

PlayerFacingAngle = PlayerFacingAngle-180.0;
new Float:F_FLOATSIN = floatsin(-PlayerFacingAngle, degrees);
new Float:F_FLOATCOS = floatcos(-PlayerFacingAngle, degrees);

F_FLOATSIN = -F_FLOATSIN;
F_FLOATCOS = -F_FLOATCOS;


if(PlayerMonsterType[playerid] == 1)//Wolf
{
if(AllowDash[playerid] == true)
{
AllowDash[playerid] = false;
SetTimerEx("DashCooldown", 3000, false, "i", playerid);
PlayerTextDrawColor(playerid, DashTD[playerid], 0xFF4000FF);
PlayerTextDrawShow(playerid, DashTD[playerid]);
SetPlayerVelocity(playerid, 0.75 * F_FLOATSIN, 0.75 * F_FLOATCOS, 0.13);
}
}

else if(PlayerMonsterType[playerid] == 2)//Bear
{
if(AllowDash[playerid] == true)
{
AllowDash[playerid] = false;
SetTimerEx("DashCooldown", 5000, false, "i", playerid);
PlayerTextDrawColor(playerid, DashTD[playerid], 0xFF4000FF);
PlayerTextDrawShow(playerid, DashTD[playerid]);
SetPlayerVelocity(playerid, 0.5 * F_FLOATSIN, 0.5 * F_FLOATCOS, 0.1);
}
}



}

}

}

}




if(newkeys & KEY_FIRE)
{
if(PlayerMonsterType[playerid] == 1 || PlayerMonsterType[playerid] == 2)
{
if(GetPlayerTeam(playerid) == 1)
{
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
{
new Float:x;
new Float:y;
new Float:z;

new Float:PlayerFacingAngle;
new const Float:DISTANCE = 3.0;
GetPlayerFacingAngle(playerid, PlayerFacingAngle);
PlayerFacingAngle = PlayerFacingAngle-180.0;
new Float:F_FLOATSIN = floatsin(-PlayerFacingAngle, degrees);
new Float:F_FLOATCOS = floatcos(-PlayerFacingAngle, degrees);

F_FLOATSIN = -F_FLOATSIN;
F_FLOATCOS = -F_FLOATCOS;

GetPlayerPos(playerid, x, y ,z);

//SetPlayerPos(playerid, x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z);









if(PlayerMonsterType[playerid] == 1)//Wolf
{
if(AllowBite[playerid] == true)
{
AllowBite[playerid] = false;
SetTimerEx("BiteCooldown", 3000, false, "i", playerid);
PlayerTextDrawColor(playerid, BiteTD[playerid], 0xFF4000FF);
PlayerTextDrawShow(playerid, BiteTD[playerid]);
CreateExplosion(x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z, 6, 0);
new Float:TargetHealth;

for(new i=0;i<MAX_PLAYERS;i=i+1)
{
if(GetPlayerTeam(i) != 1)
{
if(IsPlayerInRangeOfPoint(i, 3 ,x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z))
{
GetPlayerHealth(i, TargetHealth);
SetPlayerHealth(i, TargetHealth-25);
}


}

}

}
}

else if(PlayerMonsterType[playerid] == 2)//Bear
{
if(AllowBite[playerid] == true)
{
AllowBite[playerid] = false;
SetTimerEx("BiteCooldown", 3000, false, "i", playerid);
PlayerTextDrawColor(playerid, BiteTD[playerid], 0xFF4000FF);
PlayerTextDrawShow(playerid, BiteTD[playerid]);
CreateExplosion(x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z, 6, 0);
new Float:TargetHealth;

for(new i=0;i<MAX_PLAYERS;i=i+1)
{
if(GetPlayerTeam(i) != 1)
{
if(IsPlayerInRangeOfPoint(i, 3 ,x + DISTANCE * F_FLOATSIN, y + DISTANCE * F_FLOATCOS, z))
{
GetPlayerHealth(i, TargetHealth);
SetPlayerHealth(i, TargetHealth-50);
}


}

}

}
}



}

}

}

}







return 1;
}



public IsPlayerInSanAndreas()
{
new Float:X, Float:Y, Float:Z;
new Float:PlayerHealth;



for(new i=0; i < MAX_PLAYERS; i++)
{
GetPlayerPos(i, X, Y, Z); 


if (X > -3702.1914 && X < 3892.2615 && Y < 3301.8628 && Y > -3776.7383 && GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0)
{
if(GetPlayerState(i) == PLAYER_STATE_SPAWNED)
{
GetPlayerHealth(i, PlayerHealth);
SetPlayerHealth(i, PlayerHealth-20);
SendClientMessage(i, -1, "{FFFFFF}You are losing {FF0000}Health{FFFFFF} due to {FF0000}radiation {FFFFFF}exposure!");
SetPlayerTime(i, 21, 0);
SetPlayerWeather(i, 38);
PlayerIsInSanAndreas[i] = 1;
}
}

else
{
PlayerIsInSanAndreas[i] = 0;
}


if(PlayerIsInSanAndreas[i] == 0)
{
SetPlayerTime(i, ServerGlobalTime, 0);
SetPlayerWeather(i, ServerGlobalWeather);
}

}



}

public DashCooldown(playerid)
{
AllowDash[playerid] = true;
PlayerTextDrawColor(playerid, DashTD[playerid], 0x00FF40FF);
PlayerTextDrawShow(playerid, DashTD[playerid]);
}
public BiteCooldown(playerid)
{
AllowBite[playerid] = true;
PlayerTextDrawColor(playerid, BiteTD[playerid], 0x00FF40FF);
PlayerTextDrawShow(playerid, BiteTD[playerid]);
}

public AlienShipAction()
{

if(AlienShipSequence == 2)
{


new PlayersInTheArea = 0;

new AlienShipTarget1 = -1;
new AlienShipTarget2 = -1;
new AlienShipTarget3 = -1;
new AlienShipTarget4 = -1;
new AlienShipTarget5 = -1;

new Float:AlienShipTargetPosX;
new Float:AlienShipTargetPosY;
new Float:AlienShipTargetPosZ;

PlayersInTheArea = 0;
AlienShipTarget1 = -1;
AlienShipTarget2 = -1;
AlienShipTarget3 = -1;
AlienShipTarget4 = -1;
AlienShipTarget5 = -1;

for(new i=0;i<MAX_PLAYERS;i=i+1)
{
	if(IsPlayerConnected(i))
	{
		GetPlayerPos(i, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);

		if(AlienShipTargetPosX > -5835.2344 && AlienShipTargetPosY >  2936.5156 && AlienShipTargetPosX < -5561.9634 && AlienShipTargetPosY < 3165.0007)
		{
		//GangZoneCreate(-5835.2344, 2936.5156, -5561.9634, 3165.0007);
		PlayersInTheArea = PlayersInTheArea+1;
		
		if(AlienShipTarget1 == -1)
		{
		AlienShipTarget1 = i;
		}
		else if(AlienShipTarget2 == -1)
		{
		AlienShipTarget2 = i;
		}
		else if(AlienShipTarget3 == -1)
		{
		AlienShipTarget3 = i;
		}
		else if(AlienShipTarget4 == -1)
		{
		AlienShipTarget4 = i;
		}
		else if(AlienShipTarget5 == -1)
		{
		AlienShipTarget5 = i;
		break;
		}
		
		//SendClientMessage(i, -1, " ");
		}


	}

}



new Float:AlienShipObject1RotX,Float:AlienShipObject1RotY,Float:AlienShipObject1RotZ;
GetDynamicObjectRot(AlienShipObject1, AlienShipObject1RotX, AlienShipObject1RotY, AlienShipObject1RotZ);

new Float:AlienShipObject2RotX,Float:AlienShipObject2RotY,Float:AlienShipObject2RotZ;
GetDynamicObjectRot(AlienShipObject2, AlienShipObject2RotX, AlienShipObject2RotY, AlienShipObject2RotZ);

new Float:AlienShipObject3RotX,Float:AlienShipObject3RotY,Float:AlienShipObject3RotZ;
GetDynamicObjectRot(AlienShipObject3, AlienShipObject3RotX, AlienShipObject3RotY, AlienShipObject3RotZ);

new Float:AlienShipObject4RotX,Float:AlienShipObject4RotY,Float:AlienShipObject4RotZ;
GetDynamicObjectRot(AlienShipObject4, AlienShipObject4RotX, AlienShipObject4RotY, AlienShipObject4RotZ);









if(PlayersInTheArea >= 1)
{

new RandomPickedTarget = random(5);
new SelectedTargetPlayerID = -1;

if(RandomPickedTarget == 0)
{
AlienShipTarget1 = SelectedTargetPlayerID;
GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
}
else if(RandomPickedTarget == 1)
{

	if(IsPlayerConnected(AlienShipTarget2))
	{
	AlienShipTarget2 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
	if(!IsPlayerConnected(AlienShipTarget2))
	{
	AlienShipTarget1 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}

}
else if(RandomPickedTarget == 2)
{
	if(IsPlayerConnected(AlienShipTarget3))
	{
	AlienShipTarget3 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
	if(!IsPlayerConnected(AlienShipTarget3))
	{
	AlienShipTarget1 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
}
else if(RandomPickedTarget == 3)
{
	if(IsPlayerConnected(AlienShipTarget4))
	{
	AlienShipTarget4 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
	if(!IsPlayerConnected(AlienShipTarget4))
	{
	AlienShipTarget1 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
}
else if(RandomPickedTarget == 4)
{
	if(IsPlayerConnected(AlienShipTarget5))
	{
	AlienShipTarget5 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
	if(!IsPlayerConnected(AlienShipTarget5))
	{
	AlienShipTarget1 = SelectedTargetPlayerID;
	GetPlayerPos(SelectedTargetPlayerID, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);
	}
}


MoveDynamicObject(AlienShipObject1, AlienShipTargetPosX,AlienShipTargetPosY,80.0000, 30, 0, 0, AlienShipObject1RotZ+90);
MoveDynamicObject(AlienShipObject2, AlienShipTargetPosX,AlienShipTargetPosY,80.0000, 30, 0, 0, AlienShipObject2RotZ+90);
MoveDynamicObject(AlienShipObject3, AlienShipTargetPosX,AlienShipTargetPosY,87.3600, 30, 0, 180, AlienShipObject3RotZ+90);
MoveDynamicObject(AlienShipObject4, AlienShipTargetPosX,AlienShipTargetPosY,87.3600, 30, 0, 180, AlienShipObject4RotZ+90);


new Float:AlienShipPosX,Float:AlienShipPosY,Float:AlienShipPosZ;
GetDynamicObjectPos(AlienShipObject1, AlienShipPosX, AlienShipPosY, AlienShipPosZ);

AlienShipLazerBeam = CreateDynamicObject(18728, AlienShipPosX, AlienShipPosY, AlienShipPosZ,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
MoveDynamicObject(AlienShipLazerBeam, AlienShipTargetPosX,AlienShipTargetPosY,AlienShipTargetPosZ, 30, 0, 0, 0);

for(new i=0;i<MAX_PLAYERS;i=i+1)
{
	if(IsPlayerConnected(i))
	{
		GetPlayerPos(i, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);

		if(AlienShipTargetPosX > -5835.2344 && AlienShipTargetPosY >  2936.5156 && AlienShipTargetPosX < -5561.9634 && AlienShipTargetPosY < 3165.0007)
		{
		PlayerPlaySound(i, 5204, 0, 0, 0);
		}
	}
}
//AlienShipActionTimer = SetTimer("AlienShipAction", 2500, false);
}


if(PlayersInTheArea == 0)
{

MoveDynamicObject(AlienShipObject1, -5670.7690,3050.3462,80.0000, 30, 0, 0, AlienShipObject1RotZ+90);
MoveDynamicObject(AlienShipObject2, -5670.7690,3050.3462,80.0000, 30, 0, 0, AlienShipObject2RotZ+90);
MoveDynamicObject(AlienShipObject3, -5670.7690,3050.3462,87.3600, 30, 0, 180, AlienShipObject3RotZ+90);
MoveDynamicObject(AlienShipObject4, -5670.7690,3050.3462,87.3600, 30, 0, 180, AlienShipObject4RotZ+90);

new Float:AlienShipPosX,Float:AlienShipPosY,Float:AlienShipPosZ;
GetDynamicObjectPos(AlienShipObject1, AlienShipPosX, AlienShipPosY, AlienShipPosZ);

AlienShipLazerBeam = CreateDynamicObject(18728, AlienShipPosX, AlienShipPosY, AlienShipPosZ,   0.00000, 0.00000, 0.00000, -1, -1, -1, 1500, 1500);
MoveDynamicObject(AlienShipLazerBeam, -5670.7690,3050.3462,16.0261, 30, 0, 0, 0);

for(new i=0;i<MAX_PLAYERS;i=i+1)
{
	if(IsPlayerConnected(i))
	{
		GetPlayerPos(i, AlienShipTargetPosX, AlienShipTargetPosY, AlienShipTargetPosZ);

		if(AlienShipTargetPosX > -5835.2344 && AlienShipTargetPosY >  2936.5156 && AlienShipTargetPosX < -5561.9634 && AlienShipTargetPosY < 3165.0007)
		{
		PlayerPlaySound(i, 5204, 0, 0, 0);
		}
	}
}


}


}


}

public AlienShipAttackEnd()
{
SendClientMessageToAll(-1, "{FF0000}The Alien Ship has left!");
DestroyDynamicObject(AlienShipObject1);
DestroyDynamicObject(AlienShipObject2);
DestroyDynamicObject(AlienShipObject3);
DestroyDynamicObject(AlienShipObject4);

AlienShipSequence = 0;
AlienShipFinishedMoving = 0;
AlienShipDamageLevel = 0;
AlienShipHealth = 10000;

new Float:AlienShipPosXXX;
new Float:AlienShipPosYYY;
new Float:AlienShipPosZZZ;

KillTimer(AlienShipAttackEndTimer);

for(new i=0; i<CountDynamicObjects(); i++)//Destroying Any Lazer Beam that might be left
{
	if(IsValidDynamicObject(i))
	{

		if(GetDynamicObjectModel(i) == 18728)
			{
			GetDynamicObjectPos(i, AlienShipPosXXX, AlienShipPosYYY, AlienShipPosZZZ);
			if(AlienShipPosXXX > -5835.2344 && AlienShipPosYYY > 2936.5156 && AlienShipPosXXX < -5561.9634 && AlienShipPosYYY < 3165.0007)
			{
			DestroyDynamicObject(i);
			}
			}
	}
}

}


//This gamemode was made by BENY, if you wanna contact me, you can reach me on discord Beny#0513.




